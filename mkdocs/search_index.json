{
    "docs": [
        {
            "location": "/", 
            "text": "Wave\n#\n\n\nOverview\n#\n\n\nWave\n is a C# library that extends the ArcGIS for Desktop and ArcFM Solution APIs in an effort to simplify customizing these products. The library has been designed to use extension methods to expose the features of the library.\n\n\nWave Extensions for ArcGIS\n - The package for the ArcGIS for Desktop extensions.\n\n\n\n\nWave Extensions for ArcFM\n - The package for the ArcFM Solution extensions.\n\n\n\n\nDocumentation\n#\n\n\nYou can \ndownload\n the latest API documentation in CHM format.\n\n\n\n\nOn some systems, the contents of the CHM file is blocked. Right click on the CHM file, select \nProperties\n, and click on the \nUnblock\n button if it is present in the lower right corner of the \nGeneral\n tab in the properties dialog.\n\n\n\n\nInstallation\n#\n\n\nYou can download a release of the library using the Microsoft NuGet Package Manager within Visual Studio.\n\n\nTo install \nWave Extensions for ArcGIS\n, run the following command in the Package Manager Console.\n\n\n    PM\n Install-Package Wave.Extensions.Esri\n\n\n\n\n\nTo install \nWave Extensions for ArcFM\n, run the following command in the Package Manager Console.\n\n\n    PM\n Install-Package Wave.Extensions.Miner\n\n\n\n\n\n\n\nThe \nWave.Extensions.Esri\n package features are included in the \nWave.Extensions.Miner\n package, as the \nArcFM Solution\n product is tightly coupled with the \nArcGIS for Desktop\n product.\n\n\n\n\nRequirements\n#\n\n\n\n\nArcGIS for Desktop 10 (or higher)\n\n\nArcFM Solution 10 (or higher)\n\n\n3.5 SP 1 or 4.5 .NET Framework\n\n\nVisual Studio 2010 (or higher)\n\n\n\n\nThird Party Libraries\n#\n\n\n\n\nlog4net 2.0.3", 
            "title": "Home"
        }, 
        {
            "location": "/#wave", 
            "text": "", 
            "title": "Wave"
        }, 
        {
            "location": "/#overview", 
            "text": "Wave  is a C# library that extends the ArcGIS for Desktop and ArcFM Solution APIs in an effort to simplify customizing these products. The library has been designed to use extension methods to expose the features of the library.  Wave Extensions for ArcGIS  - The package for the ArcGIS for Desktop extensions.   Wave Extensions for ArcFM  - The package for the ArcFM Solution extensions.", 
            "title": "Overview"
        }, 
        {
            "location": "/#documentation", 
            "text": "You can  download  the latest API documentation in CHM format.   On some systems, the contents of the CHM file is blocked. Right click on the CHM file, select  Properties , and click on the  Unblock  button if it is present in the lower right corner of the  General  tab in the properties dialog.", 
            "title": "Documentation"
        }, 
        {
            "location": "/#installation", 
            "text": "You can download a release of the library using the Microsoft NuGet Package Manager within Visual Studio.  To install  Wave Extensions for ArcGIS , run the following command in the Package Manager Console.      PM  Install-Package Wave.Extensions.Esri  To install  Wave Extensions for ArcFM , run the following command in the Package Manager Console.      PM  Install-Package Wave.Extensions.Miner   The  Wave.Extensions.Esri  package features are included in the  Wave.Extensions.Miner  package, as the  ArcFM Solution  product is tightly coupled with the  ArcGIS for Desktop  product.", 
            "title": "Installation"
        }, 
        {
            "location": "/#requirements", 
            "text": "ArcGIS for Desktop 10 (or higher)  ArcFM Solution 10 (or higher)  3.5 SP 1 or 4.5 .NET Framework  Visual Studio 2010 (or higher)", 
            "title": "Requirements"
        }, 
        {
            "location": "/#third-party-libraries", 
            "text": "log4net 2.0.3", 
            "title": "Third Party Libraries"
        }, 
        {
            "location": "/samples/", 
            "text": "Samples\n#\n\n\nThe samples are designed to give \nreal-life\n example usages of the Wave libraries, and each will be accompanied by a \nREADME.md\n that will explain the usages in the GitHub repository.\n\n\nArcFM Import and Export\n#\n\n\nA command line utility that will export or import the ArcFM Properties XML for all of the feature classes, tables and relationships in the given database that is specified by the connection file.\n\n\n    internal class ProgramArguments\n    \n{\n\n        \n#region Fields\n\n\n        \n[\nArgument\n(\nArgumentType\n.\nRequired\n,\n \nShortName =\n \nf\n)]\n public string ConnectionFile\n;\n\n        \n[\nArgument\n(\nArgumentType\n.\nLastOccurenceWins\n,\n \nShortName =\n \nd\n)]\n public string \nDirectory =\n AppDomain\n.\nCurrentDomain\n.\nBaseDirectory\n;\n\n        \n[\nArgument\n(\nArgumentType\n.\nLastOccurenceWins\n,\n \nShortName =\n \nt\n)]\n public ProgramTask \nTask =\n ProgramTask\n.\nExport\n;\n\n        \n[\nArgument\n(\nArgumentType\n.\nLastOccurenceWins\n,\n \nShortName =\n \nv\n)]\n public string VersionNumber\n;\n\n\n        \n#endregion\n\n    \n}\n\n\n    internal enum ProgramTask\n    \n{\n\n        Import\n,\n\n        Export\n    \n}\n\n\n    internal class Program\n    \n{\n\n        \n#region Public Methods\n\n\n        \n[\nSTAThread\n]\n\n        public static void Main\n(\nstring\n[]\n args\n)\n\n        \n{\n\n            try\n            \n{\n\n                var \npa =\n new ProgramArguments\n();\n\n                \nif\n \n(\n!\nParser\n.\nParseArgumentsWithUsage\n(\nargs\n,\n pa\n))\n\n                    return\n;\n\n\n                new Program\n()\n.\nRun\n(\npa\n);\n\n            \n}\n\n            catch \n(\nException e\n)\n\n            \n{\n\n                Log\n.\nError\n(\ntypeof \n(\nProgram\n),\n e\n);\n\n            \n}\n\n        \n}\n\n\n        \n#endregion\n\n\n        \n#region Internal Methods\n\n\n        \n//\n/\n \nsummary\n\n        \n//\n/\n     Exports \nor\n imports the XML files\n.\n\n        \n//\n/\n \n/summary\n\n        \n//\n/\n \nparam \nname=\nargs\nThe arguments\n.\n/param\n\n        internal void Run\n(\nProgramArguments args\n)\n\n        \n{\n\n            using \n(\nRuntimeAuthorization \nlic =\n new RuntimeAuthorization\n(\nProductCode\n.\nEngineOrDesktop\n))\n\n            \n{\n\n                \nif\n \n(\nlic\n.\nInitialize\n(\nesriLicenseProductCode\n.\nesriLicenseProductCodeStandard\n,\n mmLicensedProductCode\n.\nmmLPArcFM\n))\n\n                \n{\n\n                    var \nworkspace =\n WorkspaceFactories\n.\nOpen\n(\nargs\n.\nConnectionFile\n);\n\n                    var \ndbi =\n \n(\nIDataset\n)\n workspace\n;\n\n\n                    string \nname =\n dbi\n.\nBrowseName\n;\n\n                    IMMProductData \npi =\n new BrandingResource\n();\n\n                    string \nversionNumber =\n args\n.\nVersionNumber \n??\n pi\n.\nProductVersion\n();\n\n\n                    \nif\n \n(\nargs\n.\nTask =\n=\n ProgramTask\n.\nExport\n)\n\n                    \n{\n\n                        string \ndirectory =\n Path\n.\nCombine\n(\nargs\n.\nDirectory\n,\n name\n);\n\n                        \nif\n \n(\n!\nDirectory\n.\nExists\n(\ndirectory\n))\n Directory\n.\nCreateDirectory\n(\ndirectory\n);\n\n\n                        Log\n.\nInfo\n(\nthis\n,\n \nExporting ArcFM XML Properties\n);\n\n                        Log\n.\nInfo\n(\nthis\n,\n \n- Database: \n\\\nt{0}\n,\n name\n);\n\n                        Log\n.\nInfo\n(\nthis\n,\n \n- Directory: \n\\\nt{0}\n,\n args\n.\nDirectory\n);\n\n                        Log\n.\nInfo\n(\nthis\n,\n \n- Version: \n\\\nt{0}\n,\n versionNumber\n);\n\n\n                        List\nIXMLDOMElement\n \nelements =\n new List\nIXMLDOMElement\n();\n\n                        elements\n.\nAddRange\n(\nthis\n.\nExportFeatureClasses\n(\nworkspace\n,\n directory\n,\n versionNumber\n));\n\n                        elements\n.\nAddRange\n(\nthis\n.\nExportTables\n(\nworkspace\n,\n directory\n,\n versionNumber\n));\n\n                        elements\n.\nAddRange\n(\nthis\n.\nExportRelationships\n(\nworkspace\n,\n directory\n,\n versionNumber\n));\n\n\n                        \nif\n \n(\nelements\n.\nAny\n())\n\n                        \n{\n\n                            var \ndoc =\n this\n.\nCreateDocument\n(\nversionNumber\n);\n\n\n                            foreach \n(\nvar element \nin\n elements\n)\n\n                            \n{\n\n                                doc\n.\nlastChild\n.\nappendChild\n(\nelement\n);\n\n                            \n}\n\n\n                            string \nfileName =\n Path\n.\nCombine\n(\nargs\n.\nDirectory\n,\n name \n+\n \n.xml\n);\n\n                            XDocument \nxdoc =\n XDocument\n.\nParse\n(\ndoc\n.\nxml\n);\n\n                            xdoc\n.\nSave\n(\nfileName\n,\n SaveOptions\n.\nNone\n);\n\n\n                            Log\n.\nInfo\n(\nthis\n,\n \n{0}: \n\\\nt{1}\n,\n name\n,\n fileName\n);\n\n                        \n}\n\n                    \n}\n\n                    \nelse\n\n                    \n{\n\n                        Log\n.\nInfo\n(\nthis\n,\n \nImporting ArcFM XML Properties\n);\n\n                        Log\n.\nInfo\n(\nthis\n,\n \n- Database: \n\\\nt{0}\n,\n name\n);\n\n                        Log\n.\nInfo\n(\nthis\n,\n \n- Directory: \n\\\nt{0}\n,\n args\n.\nDirectory\n);\n\n                        Log\n.\nInfo\n(\nthis\n,\n \n- Version: \n\\\nt{0}\n,\n versionNumber\n);\n\n\n                        var \nfiles =\n Directory\n.\nGetFiles\n(\nPath\n.\nGetFullPath\n(\nargs\n.\nDirectory\n),\n \n*.xml\n,\n SearchOption\n.\nAllDirectories\n);\n\n                        this\n.\nImport\n(\nworkspace\n,\n files\n);\n\n                    \n}\n\n                \n}\n\n            \n}\n\n        \n}\n\n\n        \n#endregion\n\n\n        \n#region Private Methods\n\n\n        \n//\n/\n \nsummary\n\n        \n//\n/\n     Creates the root document for the XML\n.\n\n        \n//\n/\n \n/summary\n\n        \n//\n/\n \nparam \nname=\nversionNumber\nThe version number\n.\n/param\n\n        \n//\n/\n \nreturns\nReturns a \nsee \ncref=\nIXMLDOMDocument\n \n/\n representing the root document for the XML\n.\n/returns\n\n        private IXMLDOMDocument CreateDocument\n(\nstring versionNumber\n)\n\n        \n{\n\n            IXMLDOMDocument \ndoc =\n new DOMDocumentClass\n();\n\n            var \nelement =\n doc\n.\ncreateElement\n(\nGXXML\n);\n\n            doc\n.\nappendChild\n(\nelement\n);\n\n\n            \nelement =\n doc\n.\ncreateElement\n(\nEXPORT_VERSION\n);\n\n            element\n.\ntext =\n versionNumber\n;\n\n            doc\n.\nfirstChild\n.\nappendChild\n(\nelement\n);\n\n\n            return doc\n;\n\n        \n}\n\n\n        \n//\n/\n \nsummary\n\n        \n//\n/\n     Exports the objects represeted \nin\n the grouped list\n.\n\n        \n//\n/\n \n/summary\n\n        \n//\n/\n \ntypeparam \nname=\nT\n/typeparam\n\n        \n//\n/\n \nparam \nname=\ndirectory\nThe directory\n.\n/param\n\n        \n//\n/\n \nparam \nname=\nversionNumber\nThe version number\n.\n/param\n\n        \n//\n/\n \nparam \nname=\nie\nThe \nimport\n \n/\n export interface used to create the XML\n.\n/param\n\n        \n//\n/\n \nparam \nname=\nlist\nThe list\n.\n/param\n\n        \n//\n/\n \nreturns\nReturns a \nsee \ncref=\nIEnumerable{IXMLDOMElement}\n \n/\n representing the XML of the objects\n.\n/returns\n\n        private IEnumerable\nIXMLDOMElement\n Export\nT\n(\nstring directory\n,\n string versionNumber\n,\n IMMXMLImportExport4 ie\n,\n IEnumerable\nIGrouping\nstring\n,\n T\n list\n)\n\n        \n{\n\n            foreach \n(\nvar grouping \nin\n list\n)\n\n            \n{\n\n                Log\n.\nInfo\n(\nthis\n,\n \nFeature Dataset: {0}\n,\n grouping\n.\nKey\n);\n\n\n                string \nsubdirectory =\n Path\n.\nCombine\n(\ndirectory\n,\n grouping\n.\nKey\n);\n\n                \nif\n \n(\n!\nDirectory\n.\nExists\n(\nsubdirectory\n))\n Directory\n.\nCreateDirectory\n(\nsubdirectory\n);\n\n\n                foreach \n(\nvar table \nin\n grouping\n)\n\n                \n{\n\n                    IXMLDOMDocument \ndoc =\n this\n.\nCreateDocument\n(\nversionNumber\n);\n\n                    var \nelement =\n ie\n.\nExport\n(((\nIDataset\n)\n table\n));\n\n                    \nif\n \n(\nelement \n!=\n \nnull\n)\n\n                    \n{\n\n                        doc\n.\nlastChild\n.\nappendChild\n(\nelement\n);\n\n\n                        string \nname =\n \n((\nIDataset\n)\n table\n)\n.\nName\n;\n\n                        string \nfileName =\n Path\n.\nCombine\n(\nsubdirectory\n,\n name \n+\n \n.XML\n);\n\n\n                        XDocument \nxdoc =\n XDocument\n.\nParse\n(\ndoc\n.\nxml\n);\n\n                        xdoc\n.\nSave\n(\nfileName\n,\n SaveOptions\n.\nNone\n);\n\n\n                        Log\n.\nInfo\n(\nthis\n,\n \n\\\nt{0}\n,\n name\n);\n\n\n                        yield return element\n;\n\n                    \n}\n\n                \n}\n\n            \n}\n\n        \n}\n\n\n        \n//\n/\n \nsummary\n\n        \n//\n/\n     Exports the feature classes\n.\n\n        \n//\n/\n \n/summary\n\n        \n//\n/\n \nparam \nname=\nworkspace\nThe workspace\n.\n/param\n\n        \n//\n/\n \nparam \nname=\ndirectory\nThe directory\n.\n/param\n\n        \n//\n/\n \nparam \nname=\nversionNumber\nThe version number\n.\n/param\n\n        \n//\n/\n \nreturns\nReturns a \nsee \ncref=\nIEnumerable{IXMLDOMElement}\n \n/\n representing the XML of the objects\n.\n/returns\n\n        private IEnumerable\nIXMLDOMElement\n ExportFeatureClasses\n(\nIWorkspace workspace\n,\n string directory\n,\n string versionNumber\n)\n\n        \n{\n\n            IMMXMLImportExport4 \nie =\n new MMFieldInfoIEClass\n();\n\n            return this\n.\nExport\n(\ndirectory\n,\n versionNumber\n,\n ie\n,\n workspace\n.\nGetFeatureClasses\n()\n.\nGroupBy\n(\nkvp =\n \n(\nkvp\n.\nFeatureDataset \n!=\n \nnull\n)\n \n?\n kvp\n.\nFeatureDataset\n.\nName \n:\n \n));\n\n        \n}\n\n\n        \n//\n/\n \nsummary\n\n        \n//\n/\n     Exports the relationships\n.\n\n        \n//\n/\n \n/summary\n\n        \n//\n/\n \nparam \nname=\nworkspace\nThe workspace\n.\n/param\n\n        \n//\n/\n \nparam \nname=\ndirectory\nThe directory\n.\n/param\n\n        \n//\n/\n \nparam \nname=\nversionNumber\nThe version number\n.\n/param\n\n        \n//\n/\n \nreturns\nReturns a \nsee \ncref=\nIEnumerable{IXMLDOMElement}\n \n/\n representing the XML of the objects\n.\n/returns\n\n        private IEnumerable\nIXMLDOMElement\n ExportRelationships\n(\nIWorkspace workspace\n,\n string directory\n,\n string versionNumber\n)\n\n        \n{\n\n            IMMXMLImportExport4 \nie =\n new MMRelClassIEClass\n();\n\n            return this\n.\nExport\n(\ndirectory\n,\n versionNumber\n,\n ie\n,\n workspace\n.\nGetRelationshipClasses\n()\n.\nGroupBy\n(\nkvp =\n \n(\nkvp\n.\nFeatureDataset \n!=\n \nnull\n)\n \n?\n kvp\n.\nFeatureDataset\n.\nName \n:\n \n));\n\n        \n}\n\n\n        \n//\n/\n \nsummary\n\n        \n//\n/\n     Exports the tables\n.\n\n        \n//\n/\n \n/summary\n\n        \n//\n/\n \nparam \nname=\nworkspace\nThe workspace\n.\n/param\n\n        \n//\n/\n \nparam \nname=\ndirectory\nThe directory\n.\n/param\n\n        \n//\n/\n \nparam \nname=\nversionNumber\nThe version number\n.\n/param\n\n        \n//\n/\n \nreturns\nReturns a \nsee \ncref=\nIEnumerable{IXMLDOMElement}\n \n/\n representing the XML of the objects\n.\n/returns\n\n        private IEnumerable\nIXMLDOMElement\n ExportTables\n(\nIWorkspace workspace\n,\n string directory\n,\n string versionNumber\n)\n\n        \n{\n\n            IMMXMLImportExport4 \nie =\n new MMFieldInfoIEClass\n();\n\n            return this\n.\nExport\n(\ndirectory\n,\n versionNumber\n,\n ie\n,\n workspace\n.\nGetTables\n()\n.\nGroupBy\n(\nkvp =\n \n));\n\n        \n}\n\n\n        \n//\n/\n \nsummary\n\n        \n//\n/\n     Imports the specified files into the workspace\n.\n\n        \n//\n/\n \n/summary\n\n        \n//\n/\n \nparam \nname=\nworkspace\nThe workspace\n.\n/param\n\n        \n//\n/\n \nparam \nname=\nfileNames\nThe file names\n.\n/param\n\n        private void Import\n(\nIWorkspace workspace\n,\n string\n[]\n fileNames\n)\n\n        \n{\n\n            Log\n.\nInfo\n(\nthis\n,\n \n- Import File(s): \n\\\nt{0}\n,\n fileNames\n.\nLength\n);\n\n\n            var \nies =\n new Dictionary\nstring\n,\n IMMXMLImportExport4\n()\n\n            \n{\n\n                \n{\nMMFieldInfoIE\n,\n new MMFieldInfoIEClass\n()},\n\n                \n{\nMMObjClassIE\n,\n new MMObjClassIEClass\n()},\n\n                \n{\nMMRelClassIE\n,\n new MMRelClassIEClass\n()}\n\n            \n};\n\n\n            var \nutils =\n new mmFrameworkUtilitiesClass\n();\n\n\n            foreach \n(\nvar fileName \nin\n fileNames\n)\n\n            \n{\n\n                var \nfileName1 =\n fileName\n;\n\n\n                workspace\n.\nPerformOperation\n(()\n \n=\n\n                \n{\n\n                    IXMLDOMDocument \ndoc =\n new DOMDocumentClass\n();\n\n                    \nif\n \n(\ndoc\n.\nload\n(\nfileName1\n))\n\n                    \n{\n\n                        var \ndtd =\n utils\n.\nAddDTD\n(\nmmTopLevelType\n.\nGXXMLTOPLEVEL\n,\n ref doc\n);\n\n                        \nif\n \n(\ndtd \n!=\n \n0\n)\n return \nfalse\n;\n\n\n                        var \nnodes =\n doc\n.\ngetElementsByTagName\n(\nIEPROGID\n);\n\n                        nodes\n.\nreset\n();\n\n\n                        IXMLDOMElement element\n;\n\n                        while \n((\nelement =\n nodes\n.\nnextNode\n()\n as IXMLDOMElement\n)\n \n!=\n \nnull\n)\n\n                        \n{\n\n                            var \nie =\n ies\n.\nFirstOrDefault\n(\nkvp =\n element\n.\ntext\n.\nEndsWith\n(\nkvp\n.\nKey\n,\n StringComparison\n.\nInvariantCultureIgnoreCase\n));\n\n                            this\n.\nImport\n(\nworkspace\n,\n ie\n.\nValue\n,\n \n(\nIXMLDOMElement\n)\n element\n.\nparentNode\n);\n\n                        \n}\n\n                    \n}\n\n\n                    return \ntrue\n;\n\n                \n});\n\n            \n}\n\n        \n}\n\n\n        \n//\n/\n \nsummary\n\n        \n//\n/\n     Imports the specified element into the workspace using the importer\n.\n\n        \n//\n/\n \n/summary\n\n        \n//\n/\n \nparam \nname=\nworkspace\nThe workspace\n.\n/param\n\n        \n//\n/\n \nparam \nname=\nie\nThe importer\n.\n/param\n\n        \n//\n/\n \nparam \nname=\nelement\nThe element\n.\n/param\n\n        private void Import\n(\nIWorkspace workspace\n,\n IMMXMLImportExport4 ie\n,\n IXMLDOMElement element\n)\n\n        \n{\n\n            \nif\n \n(\nie =\n=\n \nnull\n)\n return\n;\n\n\n            var \nnode =\n element\n.\nselectSingleNode\n(\nFEATURENAME\n)\n \n??\n element\n.\nselectSingleNode\n(\nNAME\n);\n\n\n            Log\n.\nInfo\n(\nthis\n,\n \n{0}:\n,\n node\n.\ntext\n);\n\n\n            try\n            \n{\n\n                var \nsuccess =\n ie\n.\nImport\n(\nworkspace\n,\n element\n,\n mmGxXMLOptions\n.\nmmGXOOverwrite\n,\n mmGxXMLSubtypeOptions\n.\nmmGXOReplace\n);\n\n                Log\n.\nInfo\n(\nthis\n,\n \n\\\nt{0} =\n {1}\n,\n ie\n.\nDisplayName\n,\n success \n?\n \nSUCCESS\n \n:\n \nFAILED\n);\n\n            \n}\n\n            catch \n(\nException e\n)\n\n            \n{\n\n                Log\n.\nError\n(\nthis\n,\n string\n.\nFormat\n(\n\\\nt{0} =\n {1}\n,\n ie\n.\nDisplayName\n,\n e\n.\nMessage\n));\n\n            \n}\n\n        \n}\n\n\n        \n#endregion\n\n    \n}\n\n\n\n\n\n\nSuggestions\n#\n\n\nYour feedback is important, make suggestions for samples. If you have a suggestion please submit an issue on our GitHub \nissue tracker\n.", 
            "title": "Samples"
        }, 
        {
            "location": "/samples/#samples", 
            "text": "The samples are designed to give  real-life  example usages of the Wave libraries, and each will be accompanied by a  README.md  that will explain the usages in the GitHub repository.", 
            "title": "Samples"
        }, 
        {
            "location": "/samples/#arcfm-import-and-export", 
            "text": "A command line utility that will export or import the ArcFM Properties XML for all of the feature classes, tables and relationships in the given database that is specified by the connection file.      internal class ProgramArguments\n     { \n         #region Fields \n\n         [ Argument ( ArgumentType . Required ,   ShortName =   f )]  public string ConnectionFile ; \n         [ Argument ( ArgumentType . LastOccurenceWins ,   ShortName =   d )]  public string  Directory =  AppDomain . CurrentDomain . BaseDirectory ; \n         [ Argument ( ArgumentType . LastOccurenceWins ,   ShortName =   t )]  public ProgramTask  Task =  ProgramTask . Export ; \n         [ Argument ( ArgumentType . LastOccurenceWins ,   ShortName =   v )]  public string VersionNumber ; \n\n         #endregion \n     } \n\n    internal enum ProgramTask\n     { \n        Import , \n        Export\n     } \n\n    internal class Program\n     { \n         #region Public Methods \n\n         [ STAThread ] \n        public static void Main ( string []  args ) \n         { \n            try\n             { \n                var  pa =  new ProgramArguments (); \n                 if   ( ! Parser . ParseArgumentsWithUsage ( args ,  pa )) \n                    return ; \n\n                new Program () . Run ( pa ); \n             } \n            catch  ( Exception e ) \n             { \n                Log . Error ( typeof  ( Program ),  e ); \n             } \n         } \n\n         #endregion \n\n         #region Internal Methods \n\n         // /   summary \n         // /      Exports  or  imports the XML files . \n         // /   /summary \n         // /   param  name= args The arguments . /param \n        internal void Run ( ProgramArguments args ) \n         { \n            using  ( RuntimeAuthorization  lic =  new RuntimeAuthorization ( ProductCode . EngineOrDesktop )) \n             { \n                 if   ( lic . Initialize ( esriLicenseProductCode . esriLicenseProductCodeStandard ,  mmLicensedProductCode . mmLPArcFM )) \n                 { \n                    var  workspace =  WorkspaceFactories . Open ( args . ConnectionFile ); \n                    var  dbi =   ( IDataset )  workspace ; \n\n                    string  name =  dbi . BrowseName ; \n                    IMMProductData  pi =  new BrandingResource (); \n                    string  versionNumber =  args . VersionNumber  ??  pi . ProductVersion (); \n\n                     if   ( args . Task = =  ProgramTask . Export ) \n                     { \n                        string  directory =  Path . Combine ( args . Directory ,  name ); \n                         if   ( ! Directory . Exists ( directory ))  Directory . CreateDirectory ( directory ); \n\n                        Log . Info ( this ,   Exporting ArcFM XML Properties ); \n                        Log . Info ( this ,   - Database:  \\ t{0} ,  name ); \n                        Log . Info ( this ,   - Directory:  \\ t{0} ,  args . Directory ); \n                        Log . Info ( this ,   - Version:  \\ t{0} ,  versionNumber ); \n\n                        List IXMLDOMElement   elements =  new List IXMLDOMElement (); \n                        elements . AddRange ( this . ExportFeatureClasses ( workspace ,  directory ,  versionNumber )); \n                        elements . AddRange ( this . ExportTables ( workspace ,  directory ,  versionNumber )); \n                        elements . AddRange ( this . ExportRelationships ( workspace ,  directory ,  versionNumber )); \n\n                         if   ( elements . Any ()) \n                         { \n                            var  doc =  this . CreateDocument ( versionNumber ); \n\n                            foreach  ( var element  in  elements ) \n                             { \n                                doc . lastChild . appendChild ( element ); \n                             } \n\n                            string  fileName =  Path . Combine ( args . Directory ,  name  +   .xml ); \n                            XDocument  xdoc =  XDocument . Parse ( doc . xml ); \n                            xdoc . Save ( fileName ,  SaveOptions . None ); \n\n                            Log . Info ( this ,   {0}:  \\ t{1} ,  name ,  fileName ); \n                         } \n                     } \n                     else \n                     { \n                        Log . Info ( this ,   Importing ArcFM XML Properties ); \n                        Log . Info ( this ,   - Database:  \\ t{0} ,  name ); \n                        Log . Info ( this ,   - Directory:  \\ t{0} ,  args . Directory ); \n                        Log . Info ( this ,   - Version:  \\ t{0} ,  versionNumber ); \n\n                        var  files =  Directory . GetFiles ( Path . GetFullPath ( args . Directory ),   *.xml ,  SearchOption . AllDirectories ); \n                        this . Import ( workspace ,  files ); \n                     } \n                 } \n             } \n         } \n\n         #endregion \n\n         #region Private Methods \n\n         // /   summary \n         // /      Creates the root document for the XML . \n         // /   /summary \n         // /   param  name= versionNumber The version number . /param \n         // /   returns Returns a  see  cref= IXMLDOMDocument   /  representing the root document for the XML . /returns \n        private IXMLDOMDocument CreateDocument ( string versionNumber ) \n         { \n            IXMLDOMDocument  doc =  new DOMDocumentClass (); \n            var  element =  doc . createElement ( GXXML ); \n            doc . appendChild ( element ); \n\n             element =  doc . createElement ( EXPORT_VERSION ); \n            element . text =  versionNumber ; \n            doc . firstChild . appendChild ( element ); \n\n            return doc ; \n         } \n\n         // /   summary \n         // /      Exports the objects represeted  in  the grouped list . \n         // /   /summary \n         // /   typeparam  name= T /typeparam \n         // /   param  name= directory The directory . /param \n         // /   param  name= versionNumber The version number . /param \n         // /   param  name= ie The  import   /  export interface used to create the XML . /param \n         // /   param  name= list The list . /param \n         // /   returns Returns a  see  cref= IEnumerable{IXMLDOMElement}   /  representing the XML of the objects . /returns \n        private IEnumerable IXMLDOMElement  Export T ( string directory ,  string versionNumber ,  IMMXMLImportExport4 ie ,  IEnumerable IGrouping string ,  T  list ) \n         { \n            foreach  ( var grouping  in  list ) \n             { \n                Log . Info ( this ,   Feature Dataset: {0} ,  grouping . Key ); \n\n                string  subdirectory =  Path . Combine ( directory ,  grouping . Key ); \n                 if   ( ! Directory . Exists ( subdirectory ))  Directory . CreateDirectory ( subdirectory ); \n\n                foreach  ( var table  in  grouping ) \n                 { \n                    IXMLDOMDocument  doc =  this . CreateDocument ( versionNumber ); \n                    var  element =  ie . Export ((( IDataset )  table )); \n                     if   ( element  !=   null ) \n                     { \n                        doc . lastChild . appendChild ( element ); \n\n                        string  name =   (( IDataset )  table ) . Name ; \n                        string  fileName =  Path . Combine ( subdirectory ,  name  +   .XML ); \n\n                        XDocument  xdoc =  XDocument . Parse ( doc . xml ); \n                        xdoc . Save ( fileName ,  SaveOptions . None ); \n\n                        Log . Info ( this ,   \\ t{0} ,  name ); \n\n                        yield return element ; \n                     } \n                 } \n             } \n         } \n\n         // /   summary \n         // /      Exports the feature classes . \n         // /   /summary \n         // /   param  name= workspace The workspace . /param \n         // /   param  name= directory The directory . /param \n         // /   param  name= versionNumber The version number . /param \n         // /   returns Returns a  see  cref= IEnumerable{IXMLDOMElement}   /  representing the XML of the objects . /returns \n        private IEnumerable IXMLDOMElement  ExportFeatureClasses ( IWorkspace workspace ,  string directory ,  string versionNumber ) \n         { \n            IMMXMLImportExport4  ie =  new MMFieldInfoIEClass (); \n            return this . Export ( directory ,  versionNumber ,  ie ,  workspace . GetFeatureClasses () . GroupBy ( kvp =   ( kvp . FeatureDataset  !=   null )   ?  kvp . FeatureDataset . Name  :   )); \n         } \n\n         // /   summary \n         // /      Exports the relationships . \n         // /   /summary \n         // /   param  name= workspace The workspace . /param \n         // /   param  name= directory The directory . /param \n         // /   param  name= versionNumber The version number . /param \n         // /   returns Returns a  see  cref= IEnumerable{IXMLDOMElement}   /  representing the XML of the objects . /returns \n        private IEnumerable IXMLDOMElement  ExportRelationships ( IWorkspace workspace ,  string directory ,  string versionNumber ) \n         { \n            IMMXMLImportExport4  ie =  new MMRelClassIEClass (); \n            return this . Export ( directory ,  versionNumber ,  ie ,  workspace . GetRelationshipClasses () . GroupBy ( kvp =   ( kvp . FeatureDataset  !=   null )   ?  kvp . FeatureDataset . Name  :   )); \n         } \n\n         // /   summary \n         // /      Exports the tables . \n         // /   /summary \n         // /   param  name= workspace The workspace . /param \n         // /   param  name= directory The directory . /param \n         // /   param  name= versionNumber The version number . /param \n         // /   returns Returns a  see  cref= IEnumerable{IXMLDOMElement}   /  representing the XML of the objects . /returns \n        private IEnumerable IXMLDOMElement  ExportTables ( IWorkspace workspace ,  string directory ,  string versionNumber ) \n         { \n            IMMXMLImportExport4  ie =  new MMFieldInfoIEClass (); \n            return this . Export ( directory ,  versionNumber ,  ie ,  workspace . GetTables () . GroupBy ( kvp =   )); \n         } \n\n         // /   summary \n         // /      Imports the specified files into the workspace . \n         // /   /summary \n         // /   param  name= workspace The workspace . /param \n         // /   param  name= fileNames The file names . /param \n        private void Import ( IWorkspace workspace ,  string []  fileNames ) \n         { \n            Log . Info ( this ,   - Import File(s):  \\ t{0} ,  fileNames . Length ); \n\n            var  ies =  new Dictionary string ,  IMMXMLImportExport4 () \n             { \n                 { MMFieldInfoIE ,  new MMFieldInfoIEClass ()}, \n                 { MMObjClassIE ,  new MMObjClassIEClass ()}, \n                 { MMRelClassIE ,  new MMRelClassIEClass ()} \n             }; \n\n            var  utils =  new mmFrameworkUtilitiesClass (); \n\n            foreach  ( var fileName  in  fileNames ) \n             { \n                var  fileName1 =  fileName ; \n\n                workspace . PerformOperation (()   = \n                 { \n                    IXMLDOMDocument  doc =  new DOMDocumentClass (); \n                     if   ( doc . load ( fileName1 )) \n                     { \n                        var  dtd =  utils . AddDTD ( mmTopLevelType . GXXMLTOPLEVEL ,  ref doc ); \n                         if   ( dtd  !=   0 )  return  false ; \n\n                        var  nodes =  doc . getElementsByTagName ( IEPROGID ); \n                        nodes . reset (); \n\n                        IXMLDOMElement element ; \n                        while  (( element =  nodes . nextNode ()  as IXMLDOMElement )   !=   null ) \n                         { \n                            var  ie =  ies . FirstOrDefault ( kvp =  element . text . EndsWith ( kvp . Key ,  StringComparison . InvariantCultureIgnoreCase )); \n                            this . Import ( workspace ,  ie . Value ,   ( IXMLDOMElement )  element . parentNode ); \n                         } \n                     } \n\n                    return  true ; \n                 }); \n             } \n         } \n\n         // /   summary \n         // /      Imports the specified element into the workspace using the importer . \n         // /   /summary \n         // /   param  name= workspace The workspace . /param \n         // /   param  name= ie The importer . /param \n         // /   param  name= element The element . /param \n        private void Import ( IWorkspace workspace ,  IMMXMLImportExport4 ie ,  IXMLDOMElement element ) \n         { \n             if   ( ie = =   null )  return ; \n\n            var  node =  element . selectSingleNode ( FEATURENAME )   ??  element . selectSingleNode ( NAME ); \n\n            Log . Info ( this ,   {0}: ,  node . text ); \n\n            try\n             { \n                var  success =  ie . Import ( workspace ,  element ,  mmGxXMLOptions . mmGXOOverwrite ,  mmGxXMLSubtypeOptions . mmGXOReplace ); \n                Log . Info ( this ,   \\ t{0} =  {1} ,  ie . DisplayName ,  success  ?   SUCCESS   :   FAILED ); \n             } \n            catch  ( Exception e ) \n             { \n                Log . Error ( this ,  string . Format ( \\ t{0} =  {1} ,  ie . DisplayName ,  e . Message )); \n             } \n         } \n\n         #endregion \n     }", 
            "title": "ArcFM Import and Export"
        }, 
        {
            "location": "/samples/#suggestions", 
            "text": "Your feedback is important, make suggestions for samples. If you have a suggestion please submit an issue on our GitHub  issue tracker .", 
            "title": "Suggestions"
        }, 
        {
            "location": "/features/", 
            "text": "Features\n#\n\n\nThis will serve as a list of the features that are currently available. Some features are important enough to have their own page in the docs, others will simply be listed.\n\n\nSeamless\n#\n\n\nWave is built using \n.NET Extension Methods\n which allows for adding new features to existing interfaces and classes within the ArcGIS and ArcFM APIs. Any interfaces or objects that are extended have been setup to use the namespace of the object, which allows Wave\ns features to be available without adding new namespace delcarations.\n\n\n\n\nFor instance, the \nRowExtensions.cs\n that contains extension methods for the \nIRow\n interface uses the \nESRI.ArcGIS.Geodatabase\n namespace because that is the namespace that contains the \nIRow\n interface.\n\n\n\n\nLINQ\n#\n\n\nThe \nwhile\n statement is used in conjunction with the ArcFM and ArcGIS APIs to iterate through collections using the \nReset()\n and \nNext()\n method combinations. However, in most cases the \nforeach\n statement is the preferred method, thus the most frequently used iterators can be converted to an enumerable type using the \nAsEnumerable()\n extension method, which allows these collections to now take advantage of \nLINQ\n.\n\n\nThe following is a short list of the interfaces that support enumerable types:\n\n\n\n\n\n\n\n\nESRI\n\n\nArcFM\n\n\n\n\n\n\n\n\n\n\nILongArray\n\n\nIMMEnumField\n\n\n\n\n\n\nIArray\n\n\nIMMEnumTable\n\n\n\n\n\n\nIEnumDomain\n\n\nIMMEnumObjectClass\n\n\n\n\n\n\nIEnumBSTR\n\n\nIMMEnumFeederSource\n\n\n\n\n\n\nIEnumIDs\n\n\nIMMPxNodeHistory\n\n\n\n\n\n\nIFields\n\n\nIMMEnumPxTransition\n\n\n\n\n\n\nIEnumRelationshipClass\n\n\nIMMPxNode\n\n\n\n\n\n\nIEnumFeatureClass\n\n\nIMMEnumPxState\n\n\n\n\n\n\nICursor\n\n\nIMMEnumPxTasks\n\n\n\n\n\n\nIFeatureCursor\n\n\nIMMEnumPxUser\n\n\n\n\n\n\nISet\n\n\nIMMEnumPxFilter\n\n\n\n\n\n\n...\n\n\nThere are many more that haven\nt been listed for the sake of brevity.\n\n\n\n\n\n\n\n\nThese new extension methods allow you to write code like this:\n\n\nint\n \ncount\n \n=\n \ncursor\n.\nAsEnumerable\n().\nCount\n();\n\n\n\n\n\n\nand:\n\n\nvar\n \nresults\n \n=\n\n    \nfrom\n \nx\n \nin\n \ncursor1\n.\nAsEnumerable\n()\n\n    \nfrom\n \ny\n \nin\n \ncursor2\n.\nAsEnumerable\n()\n\n    \nwhere\n \nx\n.\nget_Value\n(\n0\n)\n \n=\n \ny\n.\nget_Value\n(\n0\n)\n\n    \nselect\n \nnew\n \n{\n \nLeft\n \n=\n \nx\n,\n \nRight\n \n=\n \ny\n \n};\n\n\n\n\n\n\nThere are several objects (i.e. \nIEnumLayer\n, \nIMap\n, \nID8List\n) in ArcFM and ArcGIS APIs that require recursion to obtain all of the data. In the past, you\nd have to create a recursive method for iterating the contents of these hierarchical structures. These structures can now be traversed recursively using \nLINQ\n.\n\n\n\n\nTraversing the contents of the \nIMap\n.\n\n\n\n\npublic\n \nvoid\n \nClearDefinitions\n(\nIMap\n \nmap\n)\n\n\n{\n\n    \nvar\n \nlayerDefinitions\n \n=\n \nmap\n.\nWhere\n(\no\n \n=\n \no\n.\nVisible\n).\nSelect\n(\no\n \n=\n \n(\nIFeatureLayerDefinition2\n)\n \no\n)\n\n    \nforeach\n \n(\nvar\n \nlayerDefinition\n \nin\n \nlayerDefinitions\n)\n\n    \n{\n\n        \nlayerDefinition\n.\nDefinitionExpression\n \n=\n \nnull\n;\n\n    \n}\n\n\n}\n\n\n\n\n\n\n\n\nTraversing the contents of the \nID8List\n.\n\n\n\n\npublic\n \nvoid\n \nUpdateTags\n(\nID8List\n \nlist\n,\n \nstring\n \ntag\n)\n\n\n{\n\n    \nvar\n \nitems\n \n=\n \nlist\n.\nWhere\n(\no\n \n=\n \no\n \nis\n \nIMMProposedObject\n).\nSelect\n(\no\n \n=\n \n(\nIMMProposedObject\n)\n \no\n.\nValue\n)\n\n    \nforeach\n \n(\nvar\n \nitem\n \nin\n \nitems\n)\n\n    \n{\n\n        \nIMMFieldManager\n \nfieldManager\n \n=\n \nitem\n.\nFieldManager\n;\n\n        \nIMMFieldAdapter\n \nfieldAdapter\n \n=\n \nfieldManager\n.\nFieldByName\n(\nTAG\n);\n\n        \nfieldAdapter\n.\nValue\n \n=\n \ntag\n;\n\n        \nitem\n.\nUpdate\n(\nnull\n);\n\n    \n}\n\n\n}\n\n\n\n\n\n\nData Access\n#\n\n\nOne of the major benefits of using the ESRI platform it allows you to perform spatial and attribute based queries against the data to validate and perform analysis. As a side-effect, the same set of APIs are reused, which leads to code-duplication and/or memory management issues if used improperly.\n\n\nThe \nITable\n and \nIFeatureClass\n interfaces have been extended to include \nFetch\n methods that simplifies queries by abstracting the complexities while enforcing the proper memory management for the COM objects.\n\n\n\n\nFetch\n features or rows with a list of OBJECTIDs.\n\n\n\n\n    \nList\nIFeature\n \nfeatures\n \n=\n \nfeatureClass\n.\nFetch\n(\n1\n,\n2\n,\n3\n,\n4\n,\n5\n,\n6\n);\n\n\n\n\n\n\n\n\nFetch\n features or rows that need a spatial and/or attribute dependencies to filter the results.\n\n\n\n\nISpatialFilter\n \nfilter\n \n=\n \nnew\n \nSpatialFilterClass\n();\n\n\nfilter\n.\nWhereClause\n \n=\n \nfeatureClass\n.\nOIDFieldName\n \n+\n \n IN (1,2,3,4,5,6)\n;\n\n\nfilter\n.\nGeometry\n \n=\n \ngeometry\n;\n\n\nfilter\n.\nSpatialRel\n \n=\n \nesriSpatialRelEnum\n.\nesriSpatialRelIntersects\n;\n\n\nfilter\n.\nGeometryField\n \n=\n \nSHAPE\n;\n\n\n\nList\nIFeature\n \nfeatures\n \n=\n \nfeatureClass\n.\nFetch\n(\nfilter\n);\n\n\n\n\n\n\n\n\nFetch\n features or rows that need actions performed but the memory can be recycled.\n\n\n\n\nint\n \ni\n \n=\n \nfeatureClass\n.\nFindField\n(\nDATE\n);\n\n\n\nIQueryFilter\n \nfilter\n \n=\n \nnew\n \nQueryFilterClass\n();\n\n\nfilter\n.\nWhereClause\n \n=\n \nfeatureClass\n.\nOIDFieldName\n \n+\n \n IN (1,2,3,4,5,6)\n;\n\n\n\nint\n \nrowsAffected\n \n=\n \nfeatureClass\n.\nFetch\n(\nfilter\n,\n \nfeature\n \n=\n\n\n{\n\n     \nfeature\n.\nset_Value\n(\ni\n,\n \nDateTime\n.\nNow\n);\n\n     \nfeature\n.\nStore\n();\n\n\n});\n\n\n\n\n\n\n\n\nFetch\n features or rows with a projection.\n\n\n\n\nISpatialFilter\n \nfilter\n \n=\n \nnew\n \nSpatialFilterClass\n();\n\n\nfilter\n.\nWhereClause\n \n=\n \nfeatureClass\n.\nOIDFieldName\n \n+\n \n IN (1,2,3,4,5,6)\n;\n\n\nfilter\n.\nGeometry\n \n=\n \ngeometry\n;\n\n\nfilter\n.\nSpatialRel\n \n=\n \nesriSpatialRelEnum\n.\nesriSpatialRelIntersects\n;\n\n\nfilter\n.\nGeometryField\n \n=\n \nSHAPE\n;\n\n\n\nList\nint\n \noids\n \n=\n \nfeatureClass\n.\nFetch\n(\nfilter\n,\n \nfeature\n \n=\n \nfeature\n.\nOID\n);\n\n\n\n\n\n\nRepetitive Implementations\n#\n\n\nThe ArcFM and ArcGIS platform provides multiple extension points and while we cannot address them all we have included abstract implementations for the most common extensions made while working with these software packages.\n\n\n\n\n\n\n\n\nClass\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nBaseMxCommand\n\n\nCreating a button within the ArcMap application.\n\n\n\n\n\n\nBaseGxCommand\n\n\nCreating a button within the ArcCatalog application.\n\n\n\n\n\n\nBaseExtension\n\n\nCreating an extension within the ArcMap application.\n\n\n\n\n\n\nBaseTool\n\n\nCreating a tool within the ArcMap application.\n\n\n\n\n\n\nBaseAbandonAU\n\n\nCreating a custom trigger for abandoning features.\n\n\n\n\n\n\nBaseAttributeAU\n\n\nCreating a custom trigger for a field when the object is created, updated or deleted.\n\n\n\n\n\n\nBaseSpecialAU\n\n\nCreating a custom trigger for the object when it is created, updated or deleted.\n\n\n\n\n\n\nBaseRelationshipAU\n\n\nCreating a custom trigger for when a relationship is created, updated or deleted.\n\n\n\n\n\n\nBasePxSubtask\n\n\nCreating a sub-routine that can be assigned to tasks within the Process Framework.\n\n\n\n\n\n\n...\n\n\nThere are many more that haven\nt been listed for the sake of brevity.\n\n\n\n\n\n\n\n\nModel Names\n#\n\n\nThe ArcFM Solution provides a way to identify ESRI tables and fields based on a user defined key that are call Class, Field and Database Model Names. These model names can be for cross-database or generic implementations. However, they must be accessed using a singleton object, which tends to lead to the creation of class helper.\n\n\nIn order to simplify the accessing of model name information, several extension methods were added to the ESRI objects that support ArcFM Model Names.\n\n\nThe extension methods for the \nIFeatureClass\n and \nITable\n interfaces that have been added.\n\n\n\n\n\n\n\n\nMethod\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nIsAssignedClassModelName\n\n\nUsed to determine if a class model name(s) has been assigned.\n\n\n\n\n\n\nIsAssignedFieldModelName\n\n\nUsed to determine if a field model name(s) has been assigned.\n\n\n\n\n\n\nGetRelationshipClass\n\n\nUsed to locate the relationship that has been assigned the class model name(s).\n\n\n\n\n\n\nGetRelationshipClasses\n\n\nUsed to gather a list of the relationships that has been assigned the class model name(s).\n\n\n\n\n\n\nGetField\n\n\nUsed to locate the \nIField\n that has been assigned the field model name(s).\n\n\n\n\n\n\nGetFields\n\n\nUsed to gather a list of of the \nIField\n objects that has been assigned the field model name(s).\n\n\n\n\n\n\nGetFieldIndex\n\n\nUsed to locate the field index that has been assigned the field model name(s).\n\n\n\n\n\n\nGetFieldIndexes\n\n\nUsed to gather a list of all of the field indexes that has been assigned the field model name(s).\n\n\n\n\n\n\nGetFieldName\n\n\nUsed to locate the field name that has been assigned the field model name(s).\n\n\n\n\n\n\nGetFieldNames\n\n\nUsed to gather a list of all of the field names that has been assigned the field model name(s).\n\n\n\n\n\n\n...\n\n\nThere are many more that haven\nt been listed for the sake of brevity.\n\n\n\n\n\n\n\n\nA list of extension methods for the \nIWorkspace\n interface that have been added.\n\n\n\n\n\n\n\n\nMethod\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nIsAssignedDatabaseModelName\n\n\nUse to determine if the database model name(s) has been assigned.\n\n\n\n\n\n\nGetFeatureClass\n\n\nUsed to obtain the \nIFeatureClass\n that has been assigned the class model name(s).\n\n\n\n\n\n\nGetFeatureClasses\n\n\nUsed to obtain all of the \nIFeatureClass\n tables that have been assigned the class model name(s).\n\n\n\n\n\n\nGetTable\n\n\nUsed to obtain the \nITable\n that has been assigned the class model name(s).\n\n\n\n\n\n\nGetTables\n\n\nUsed to obtain all of the \nITable\n tables that have been assigned the class model name(s).\n\n\n\n\n\n\n...\n\n\nThere are many more that haven\nt been listed for the sake of brevity.\n\n\n\n\n\n\n\n\nComponent Registration\n#\n\n\nThe \nWave Extensions for ArcGIS\n and \nWave Extensions for ArcFM\n packages will automatically import the \nWave.Extensions.Esri.targets\n and \nWave.Extensions.Miner.targets\n into the Visual Studio Project File when the packages are installed. These \nMS Build\n target files are used to register the \nESRI\n and \nArcFM\n components when the project is compiled.\n\n\n\n\nWave.Extensions.Esri.targets\n\n\n\n\n?xml version=\n1.0\n encoding=\nutf-8\n?\n\n\nProject\n \nxmlns=\nhttp://schemas.microsoft.com/developer/msbuild/2003\n  \n  \nPropertyGroup\n\n    \nRegisterForComInterop\n \nCondition=\n$(RegisterForComInterop)\n == \nFalse\n/RegisterForComInterop\n\n  \n/PropertyGroup\n\n  \nTarget\n \nName=\nBeforeClean\n \nCondition=\n$(RegisterForComInterop) == \nTrue\n    \n    \nMessage\n \nText=\nWave.Extensions.Esri.targets: Unregistered\n/\n    \n    \nExec\n \nWorkingDirectory=\n$(CommonProgramFiles)\\ArcGIS\\bin\n \nCommand=\nESRIRegAsm.exe \nquot;$(TargetPath)\nquot; /p:Desktop /u /s\n \nCondition=\nExists(\n$(TargetPath)\n)\n \nContinueOnError=\ntrue\n/\n          \n  \n/Target\n\n  \nTarget\n \nName=\nAfterBuild\n \nCondition=\n$(RegisterForComInterop) == \nTrue\n  \n    \nMessage\n \nText=\nWave.Extensions.Esri.targets Registered\n/\n  \n    \nExec\n \nWorkingDirectory=\n$(CommonProgramFiles)\\ArcGIS\\bin\n \nCommand=\nESRIRegAsm.exe \nquot;$(TargetPath)\nquot; /p:Desktop /s\n \nContinueOnError=\ntrue\n \n/\n        \n  \n/Target\n\n\n/Project\n\n\n\n\n\n\n\n\nWave.Extensions.Miner.targets\n\n\n\n\n?xml version=\n1.0\n encoding=\nutf-8\n?\n\n\nProject\n \nxmlns=\nhttp://schemas.microsoft.com/developer/msbuild/2003\n  \n  \nPropertyGroup\n\n    \nRegisterForComInterop\n \nCondition=\n$(RegisterForComInterop)\n == \nFalse\n/RegisterForComInterop\n\n  \n/PropertyGroup\n\n  \nTarget\n \nName=\nBeforeClean\n \nCondition=\n$(RegisterForComInterop) == \nTrue\n    \n    \nMessage\n \nText=\nWave.Extensions.Miner.targets: Unregistered\n/\n    \n    \nExec\n \nWorkingDirectory=\n$(CommonProgramFiles)\\ArcGIS\\bin\n \nCommand=\nESRIRegAsm.exe \nquot;$(TargetPath)\nquot; /p:Desktop /u /s\n \nCondition=\nExists(\n$(TargetPath)\n)\n \nContinueOnError=\ntrue\n/\n      \n    \nExec\n \nWorkingDirectory=\n$(ProgramFiles)\\Miner and Miner\\ArcFM Solution\\Bin\n \nCommand=\nRegX.exe \nquot;$(TargetPath)\nquot; /d /u\n \nCondition=\nExists(\n$(TargetPath)\n)\n \nContinueOnError=\ntrue\n \n/\n        \n  \n/Target\n\n  \nTarget\n \nName=\nAfterBuild\n \nCondition=\n$(RegisterForComInterop) == \nTrue\n  \n    \nMessage\n \nText=\nWave.Extensions.Miner.targets Registered\n/\n  \n    \nExec\n \nWorkingDirectory=\n$(CommonProgramFiles)\\ArcGIS\\bin\n \nCommand=\nESRIRegAsm.exe \nquot;$(TargetPath)\nquot; /p:Desktop /s\n \nContinueOnError=\ntrue\n \n/\n\n    \nExec\n \nWorkingDirectory=\n$(ProgramFiles)\\Miner and Miner\\ArcFM Solution\\Bin\n \nCommand=\nRegX.exe \nquot;$(TargetPath)\nquot; /d\n \nContinueOnError=\ntrue\n \n/\n       \n  \n/Target\n\n\n/Project", 
            "title": "Features"
        }, 
        {
            "location": "/features/#features", 
            "text": "This will serve as a list of the features that are currently available. Some features are important enough to have their own page in the docs, others will simply be listed.", 
            "title": "Features"
        }, 
        {
            "location": "/features/#seamless", 
            "text": "Wave is built using  .NET Extension Methods  which allows for adding new features to existing interfaces and classes within the ArcGIS and ArcFM APIs. Any interfaces or objects that are extended have been setup to use the namespace of the object, which allows Wave s features to be available without adding new namespace delcarations.   For instance, the  RowExtensions.cs  that contains extension methods for the  IRow  interface uses the  ESRI.ArcGIS.Geodatabase  namespace because that is the namespace that contains the  IRow  interface.", 
            "title": "Seamless"
        }, 
        {
            "location": "/features/#linq", 
            "text": "The  while  statement is used in conjunction with the ArcFM and ArcGIS APIs to iterate through collections using the  Reset()  and  Next()  method combinations. However, in most cases the  foreach  statement is the preferred method, thus the most frequently used iterators can be converted to an enumerable type using the  AsEnumerable()  extension method, which allows these collections to now take advantage of  LINQ .  The following is a short list of the interfaces that support enumerable types:     ESRI  ArcFM      ILongArray  IMMEnumField    IArray  IMMEnumTable    IEnumDomain  IMMEnumObjectClass    IEnumBSTR  IMMEnumFeederSource    IEnumIDs  IMMPxNodeHistory    IFields  IMMEnumPxTransition    IEnumRelationshipClass  IMMPxNode    IEnumFeatureClass  IMMEnumPxState    ICursor  IMMEnumPxTasks    IFeatureCursor  IMMEnumPxUser    ISet  IMMEnumPxFilter    ...  There are many more that haven t been listed for the sake of brevity.     These new extension methods allow you to write code like this:  int   count   =   cursor . AsEnumerable (). Count ();   and:  var   results   = \n     from   x   in   cursor1 . AsEnumerable () \n     from   y   in   cursor2 . AsEnumerable () \n     where   x . get_Value ( 0 )   =   y . get_Value ( 0 ) \n     select   new   {   Left   =   x ,   Right   =   y   };   There are several objects (i.e.  IEnumLayer ,  IMap ,  ID8List ) in ArcFM and ArcGIS APIs that require recursion to obtain all of the data. In the past, you d have to create a recursive method for iterating the contents of these hierarchical structures. These structures can now be traversed recursively using  LINQ .   Traversing the contents of the  IMap .   public   void   ClearDefinitions ( IMap   map )  { \n     var   layerDefinitions   =   map . Where ( o   =   o . Visible ). Select ( o   =   ( IFeatureLayerDefinition2 )   o ) \n     foreach   ( var   layerDefinition   in   layerDefinitions ) \n     { \n         layerDefinition . DefinitionExpression   =   null ; \n     }  }    Traversing the contents of the  ID8List .   public   void   UpdateTags ( ID8List   list ,   string   tag )  { \n     var   items   =   list . Where ( o   =   o   is   IMMProposedObject ). Select ( o   =   ( IMMProposedObject )   o . Value ) \n     foreach   ( var   item   in   items ) \n     { \n         IMMFieldManager   fieldManager   =   item . FieldManager ; \n         IMMFieldAdapter   fieldAdapter   =   fieldManager . FieldByName ( TAG ); \n         fieldAdapter . Value   =   tag ; \n         item . Update ( null ); \n     }  }", 
            "title": "LINQ"
        }, 
        {
            "location": "/features/#data-access", 
            "text": "One of the major benefits of using the ESRI platform it allows you to perform spatial and attribute based queries against the data to validate and perform analysis. As a side-effect, the same set of APIs are reused, which leads to code-duplication and/or memory management issues if used improperly.  The  ITable  and  IFeatureClass  interfaces have been extended to include  Fetch  methods that simplifies queries by abstracting the complexities while enforcing the proper memory management for the COM objects.   Fetch  features or rows with a list of OBJECTIDs.        List IFeature   features   =   featureClass . Fetch ( 1 , 2 , 3 , 4 , 5 , 6 );    Fetch  features or rows that need a spatial and/or attribute dependencies to filter the results.   ISpatialFilter   filter   =   new   SpatialFilterClass ();  filter . WhereClause   =   featureClass . OIDFieldName   +    IN (1,2,3,4,5,6) ;  filter . Geometry   =   geometry ;  filter . SpatialRel   =   esriSpatialRelEnum . esriSpatialRelIntersects ;  filter . GeometryField   =   SHAPE ;  List IFeature   features   =   featureClass . Fetch ( filter );    Fetch  features or rows that need actions performed but the memory can be recycled.   int   i   =   featureClass . FindField ( DATE );  IQueryFilter   filter   =   new   QueryFilterClass ();  filter . WhereClause   =   featureClass . OIDFieldName   +    IN (1,2,3,4,5,6) ;  int   rowsAffected   =   featureClass . Fetch ( filter ,   feature   =  { \n      feature . set_Value ( i ,   DateTime . Now ); \n      feature . Store ();  });    Fetch  features or rows with a projection.   ISpatialFilter   filter   =   new   SpatialFilterClass ();  filter . WhereClause   =   featureClass . OIDFieldName   +    IN (1,2,3,4,5,6) ;  filter . Geometry   =   geometry ;  filter . SpatialRel   =   esriSpatialRelEnum . esriSpatialRelIntersects ;  filter . GeometryField   =   SHAPE ;  List int   oids   =   featureClass . Fetch ( filter ,   feature   =   feature . OID );", 
            "title": "Data Access"
        }, 
        {
            "location": "/features/#repetitive-implementations", 
            "text": "The ArcFM and ArcGIS platform provides multiple extension points and while we cannot address them all we have included abstract implementations for the most common extensions made while working with these software packages.     Class  Description      BaseMxCommand  Creating a button within the ArcMap application.    BaseGxCommand  Creating a button within the ArcCatalog application.    BaseExtension  Creating an extension within the ArcMap application.    BaseTool  Creating a tool within the ArcMap application.    BaseAbandonAU  Creating a custom trigger for abandoning features.    BaseAttributeAU  Creating a custom trigger for a field when the object is created, updated or deleted.    BaseSpecialAU  Creating a custom trigger for the object when it is created, updated or deleted.    BaseRelationshipAU  Creating a custom trigger for when a relationship is created, updated or deleted.    BasePxSubtask  Creating a sub-routine that can be assigned to tasks within the Process Framework.    ...  There are many more that haven t been listed for the sake of brevity.", 
            "title": "Repetitive Implementations"
        }, 
        {
            "location": "/features/#model-names", 
            "text": "The ArcFM Solution provides a way to identify ESRI tables and fields based on a user defined key that are call Class, Field and Database Model Names. These model names can be for cross-database or generic implementations. However, they must be accessed using a singleton object, which tends to lead to the creation of class helper.  In order to simplify the accessing of model name information, several extension methods were added to the ESRI objects that support ArcFM Model Names.  The extension methods for the  IFeatureClass  and  ITable  interfaces that have been added.     Method  Description      IsAssignedClassModelName  Used to determine if a class model name(s) has been assigned.    IsAssignedFieldModelName  Used to determine if a field model name(s) has been assigned.    GetRelationshipClass  Used to locate the relationship that has been assigned the class model name(s).    GetRelationshipClasses  Used to gather a list of the relationships that has been assigned the class model name(s).    GetField  Used to locate the  IField  that has been assigned the field model name(s).    GetFields  Used to gather a list of of the  IField  objects that has been assigned the field model name(s).    GetFieldIndex  Used to locate the field index that has been assigned the field model name(s).    GetFieldIndexes  Used to gather a list of all of the field indexes that has been assigned the field model name(s).    GetFieldName  Used to locate the field name that has been assigned the field model name(s).    GetFieldNames  Used to gather a list of all of the field names that has been assigned the field model name(s).    ...  There are many more that haven t been listed for the sake of brevity.     A list of extension methods for the  IWorkspace  interface that have been added.     Method  Description      IsAssignedDatabaseModelName  Use to determine if the database model name(s) has been assigned.    GetFeatureClass  Used to obtain the  IFeatureClass  that has been assigned the class model name(s).    GetFeatureClasses  Used to obtain all of the  IFeatureClass  tables that have been assigned the class model name(s).    GetTable  Used to obtain the  ITable  that has been assigned the class model name(s).    GetTables  Used to obtain all of the  ITable  tables that have been assigned the class model name(s).    ...  There are many more that haven t been listed for the sake of brevity.", 
            "title": "Model Names"
        }, 
        {
            "location": "/features/#component-registration", 
            "text": "The  Wave Extensions for ArcGIS  and  Wave Extensions for ArcFM  packages will automatically import the  Wave.Extensions.Esri.targets  and  Wave.Extensions.Miner.targets  into the Visual Studio Project File when the packages are installed. These  MS Build  target files are used to register the  ESRI  and  ArcFM  components when the project is compiled.   Wave.Extensions.Esri.targets   ?xml version= 1.0  encoding= utf-8 ?  Project   xmlns= http://schemas.microsoft.com/developer/msbuild/2003   \n   PropertyGroup \n     RegisterForComInterop   Condition= $(RegisterForComInterop)  ==  False /RegisterForComInterop \n   /PropertyGroup \n   Target   Name= BeforeClean   Condition= $(RegisterForComInterop) ==  True     \n     Message   Text= Wave.Extensions.Esri.targets: Unregistered /     \n     Exec   WorkingDirectory= $(CommonProgramFiles)\\ArcGIS\\bin   Command= ESRIRegAsm.exe  quot;$(TargetPath) quot; /p:Desktop /u /s   Condition= Exists( $(TargetPath) )   ContinueOnError= true /           \n   /Target \n   Target   Name= AfterBuild   Condition= $(RegisterForComInterop) ==  True   \n     Message   Text= Wave.Extensions.Esri.targets Registered /   \n     Exec   WorkingDirectory= $(CommonProgramFiles)\\ArcGIS\\bin   Command= ESRIRegAsm.exe  quot;$(TargetPath) quot; /p:Desktop /s   ContinueOnError= true   /         \n   /Target  /Project    Wave.Extensions.Miner.targets   ?xml version= 1.0  encoding= utf-8 ?  Project   xmlns= http://schemas.microsoft.com/developer/msbuild/2003   \n   PropertyGroup \n     RegisterForComInterop   Condition= $(RegisterForComInterop)  ==  False /RegisterForComInterop \n   /PropertyGroup \n   Target   Name= BeforeClean   Condition= $(RegisterForComInterop) ==  True     \n     Message   Text= Wave.Extensions.Miner.targets: Unregistered /     \n     Exec   WorkingDirectory= $(CommonProgramFiles)\\ArcGIS\\bin   Command= ESRIRegAsm.exe  quot;$(TargetPath) quot; /p:Desktop /u /s   Condition= Exists( $(TargetPath) )   ContinueOnError= true /       \n     Exec   WorkingDirectory= $(ProgramFiles)\\Miner and Miner\\ArcFM Solution\\Bin   Command= RegX.exe  quot;$(TargetPath) quot; /d /u   Condition= Exists( $(TargetPath) )   ContinueOnError= true   /         \n   /Target \n   Target   Name= AfterBuild   Condition= $(RegisterForComInterop) ==  True   \n     Message   Text= Wave.Extensions.Miner.targets Registered /   \n     Exec   WorkingDirectory= $(CommonProgramFiles)\\ArcGIS\\bin   Command= ESRIRegAsm.exe  quot;$(TargetPath) quot; /p:Desktop /s   ContinueOnError= true   / \n     Exec   WorkingDirectory= $(ProgramFiles)\\Miner and Miner\\ArcFM Solution\\Bin   Command= RegX.exe  quot;$(TargetPath) quot; /d   ContinueOnError= true   /        \n   /Target  /Project", 
            "title": "Component Registration"
        }, 
        {
            "location": "/faq/", 
            "text": "Frequently Asked Questions\n#\n\n\nThis will serve as a list of all of the frequently ask questions.\n\n\nIf you don\nt see your question answered here, please submit an issue on the \nGitHub\n page with your question.\n\n\n1. What is Wave?\n#\n\n\nWave is meant to provide a simplistic approach to extending the ArcGIS and ArcFM platforms by providing simplified implementations for complex operations, frequently use call stacks, enforcing the recommended best practices and create a seamless integration.\n\n\n2. What was the motivation?\n#\n\n\nOver the years as a developer in the Geographic Information System (GIS) for Utilities industry there\ns been an increasing need for a way to make development easier as the industries needs increase in complexity.\n\n\n3. What is ArcGIS?\n#\n\n\nArcGIS\n is a comprehensive system that allows people to collect, organize, manage, analyze, communicate, and distribute geographic information. As the world\ns leading platform for building and using geographic information systems (GIS), ArcGIS is used by people all over the world to put geographic knowledge to work in government, business, science, education, and media. ArcGIS enables geographic information to be published so it can be accessed and used by anyone. The system is available everywhere using web browsers, mobile devices such as smartphones, and desktop computers.\n\n\n4. What is ArcFM?\n#\n\n\nArcFM\n is an Enterprise GIS with reliable network intelligence that provides information such as pipe water direction flows, the number of customers attached to a gas meter, and what devices are downstream of a particular fuse.\n\n\n5. Do I need both ArcFM and ArcGIS to use Wave?\n#\n\n\nWave has been developed with it\ns dependencies in mind to allow the library to be used in two different ways:\n\n\n\n\n\n\nWhen only the \nArcGIS for Desktop\n is installed, you\nll want to install the \nWave Extensions for ArcGIS\n package.\n\n\n\n\n\n\nWhen both the \nArcGIS for Desktop\n and \nArcFM Solution\n, you\nll want to install the \nWave Extensions for ArcFM\n  package.\n\n\n\n\n\n\n6. Do I need a license to use Wave?\n#\n\n\nWave is open-source and doesn\nt directly require any licenses, however since both \nArcFM\n and \nArcGIS\n are commercial software packages that require licenses.\n\n\n8. Where are the packages published?\n#\n\n\nThe packages are published to the \nNuGet\n (provided by Microsoft) service to allow the community to consume the libraries without needing to download and compile the source.\n\n\n9. What\ns installed with the packages?\n#\n\n\nWhen a package is being \u201cinstalled\u201d it will be downloaded to the local machine and will modify the project in the following ways.\n\n\n\n\n\n\nThree files will be added to the project.\n\n\n\n\nLogInfo.cs\n \u2013 Contains the necessary information for using log4net configurations.\n\n\nWave.log4net.config\n \u2013 Contains the default configurations used for logging information.\n\n\npackages.config\n \u2013 Contains information about the packages that have been installed.\n\n\n\n\n\n\n\n\nA packages folder will be added to the root of the solution. This folder will contain the contents of the packages that have been installed.\n\n\n\n\n\n\nThe \n*.csproj\n file will be modified to include the MSBuild targets (that are included in the packages), that will automate the ESRI and MINER component registration.\n\n\n\n\nMust\n be using the Attribute declarations on the classes.\n\n\nMust\n have the Register for COM option checked within Visual Studios.\n\n\n\n\n\n\n\n\nA reference to the \nlog4net\n assembly will be downloaded and added to the project (as it is a dependency of the Wave packages).\n\n\n\n\n\n\n10. What logging framework is used by Wave?\n#\n\n\nWe have elected to use \nlog4net\n as the logging framework.\n\n\n11. What \nlog4net\n configuration file is used?\n#\n\n\nThe \nWave.Extensions.Esri\n and \nWave.Extensions.Miner\n package have been configured to use the configuration file named \nWave.log4net.config\n (which is installed with the packages).\n\n\n\n\nThe configuration file must reside in the directory of the running application. For example, \n%PROGRAMFILES%\\ArcGIS\\Bin\n and \n%PROGRAMFILES%\\Miner and Miner\\ArcFM Solution\\Bin\n when the assemblies are used for extensions within ArcGIS for Desktop or ArcFM Solution.\n\n\n\n\n12. How are the packages distributed?\n#\n\n\nThe packages are distributed using \nNuGet\n (provided by Microsoft), which is a Visual Studio extension that makes it easy to add, remove and update libraries and tools in Visual Studio projects that use the .NET Framework.", 
            "title": "Frequently Asked Questions"
        }, 
        {
            "location": "/faq/#frequently-asked-questions", 
            "text": "This will serve as a list of all of the frequently ask questions.  If you don t see your question answered here, please submit an issue on the  GitHub  page with your question.", 
            "title": "Frequently Asked Questions"
        }, 
        {
            "location": "/faq/#1-what-is-wave", 
            "text": "Wave is meant to provide a simplistic approach to extending the ArcGIS and ArcFM platforms by providing simplified implementations for complex operations, frequently use call stacks, enforcing the recommended best practices and create a seamless integration.", 
            "title": "1. What is Wave?"
        }, 
        {
            "location": "/faq/#2-what-was-the-motivation", 
            "text": "Over the years as a developer in the Geographic Information System (GIS) for Utilities industry there s been an increasing need for a way to make development easier as the industries needs increase in complexity.", 
            "title": "2. What was the motivation?"
        }, 
        {
            "location": "/faq/#3-what-is-arcgis", 
            "text": "ArcGIS  is a comprehensive system that allows people to collect, organize, manage, analyze, communicate, and distribute geographic information. As the world s leading platform for building and using geographic information systems (GIS), ArcGIS is used by people all over the world to put geographic knowledge to work in government, business, science, education, and media. ArcGIS enables geographic information to be published so it can be accessed and used by anyone. The system is available everywhere using web browsers, mobile devices such as smartphones, and desktop computers.", 
            "title": "3. What is ArcGIS?"
        }, 
        {
            "location": "/faq/#4-what-is-arcfm", 
            "text": "ArcFM  is an Enterprise GIS with reliable network intelligence that provides information such as pipe water direction flows, the number of customers attached to a gas meter, and what devices are downstream of a particular fuse.", 
            "title": "4. What is ArcFM?"
        }, 
        {
            "location": "/faq/#5-do-i-need-both-arcfm-and-arcgis-to-use-wave", 
            "text": "Wave has been developed with it s dependencies in mind to allow the library to be used in two different ways:    When only the  ArcGIS for Desktop  is installed, you ll want to install the  Wave Extensions for ArcGIS  package.    When both the  ArcGIS for Desktop  and  ArcFM Solution , you ll want to install the  Wave Extensions for ArcFM   package.", 
            "title": "5. Do I need both ArcFM and ArcGIS to use Wave?"
        }, 
        {
            "location": "/faq/#6-do-i-need-a-license-to-use-wave", 
            "text": "Wave is open-source and doesn t directly require any licenses, however since both  ArcFM  and  ArcGIS  are commercial software packages that require licenses.", 
            "title": "6. Do I need a license to use Wave?"
        }, 
        {
            "location": "/faq/#8-where-are-the-packages-published", 
            "text": "The packages are published to the  NuGet  (provided by Microsoft) service to allow the community to consume the libraries without needing to download and compile the source.", 
            "title": "8. Where are the packages published?"
        }, 
        {
            "location": "/faq/#9-whats-installed-with-the-packages", 
            "text": "When a package is being \u201cinstalled\u201d it will be downloaded to the local machine and will modify the project in the following ways.    Three files will be added to the project.   LogInfo.cs  \u2013 Contains the necessary information for using log4net configurations.  Wave.log4net.config  \u2013 Contains the default configurations used for logging information.  packages.config  \u2013 Contains information about the packages that have been installed.     A packages folder will be added to the root of the solution. This folder will contain the contents of the packages that have been installed.    The  *.csproj  file will be modified to include the MSBuild targets (that are included in the packages), that will automate the ESRI and MINER component registration.   Must  be using the Attribute declarations on the classes.  Must  have the Register for COM option checked within Visual Studios.     A reference to the  log4net  assembly will be downloaded and added to the project (as it is a dependency of the Wave packages).", 
            "title": "9. What's installed with the packages?"
        }, 
        {
            "location": "/faq/#10-what-logging-framework-is-used-by-wave", 
            "text": "We have elected to use  log4net  as the logging framework.", 
            "title": "10. What logging framework is used by Wave?"
        }, 
        {
            "location": "/faq/#11-what-log4net-configuration-file-is-used", 
            "text": "The  Wave.Extensions.Esri  and  Wave.Extensions.Miner  package have been configured to use the configuration file named  Wave.log4net.config  (which is installed with the packages).   The configuration file must reside in the directory of the running application. For example,  %PROGRAMFILES%\\ArcGIS\\Bin  and  %PROGRAMFILES%\\Miner and Miner\\ArcFM Solution\\Bin  when the assemblies are used for extensions within ArcGIS for Desktop or ArcFM Solution.", 
            "title": "11. What log4net configuration file is used?"
        }, 
        {
            "location": "/faq/#12-how-are-the-packages-distributed", 
            "text": "The packages are distributed using  NuGet  (provided by Microsoft), which is a Visual Studio extension that makes it easy to add, remove and update libraries and tools in Visual Studio projects that use the .NET Framework.", 
            "title": "12. How are the packages distributed?"
        }, 
        {
            "location": "/contribute/", 
            "text": "Contributing\n#\n\n\nWave is open-source and, as such, grows (or shrinks) \n improves in part due to the community. The goal here is to make contributions clear, make sure there is a history, and most importantly, to give credit where credit is due.\n\n\nFork It!\n#\n\n\nThis is the preferred method for contributions. Simply create a GitHub fork, commit changes to the fork, and then open up a pull request.\n\n\n\n\nDownload the \nGitHub for Windows Client\n\n\nLogin or sign-up on GitHub.\n\n\nFork the \nWave\n project.\n\n\n\n\nIssues\n#\n\n\nThe list of outstanding feature requests and issues can be found on our on our GitHub \nissue tracker\n. Pick an unassigned issue that you think you can accomplish, add a comment that you are attempting to do it, and shortly your own personal label matching your GitHub ID will be assigned to that issue.\n\n\nSubmit Issues\n#\n\n\nWe know we aren\nt perfect, so please submit issues it\ns easy.\n- Check the \nmaster\n to make sure you\nre not wasting your (and our) time, you should be using the latest version before you submit your issue. First of all, you should download the latest nightly build to be sure you have the latest version. If you\nve done this and you still experience the issue, go ahead to the next step.\n\n\n\n\n\n\nNow that you have the latest version and still think you\nve found a issue, please search through the \nissue tracker\n to see if anyone else has already submitted it. If you find that someone has submitted your issue already, please go to the next step anyway, but instead of submitting a new issue, comment on the one you\nve found. If you can\nt find your issue, go to the next step.\n\n\n\n\n\n\nWhen submitting the issue, use the following guidelines to help provide the most useful information in issue reports. The better your issue report, the higher the chance that your issue will be addressed quickly.\n\n\n\n\n\n\nTitle\n: A good title explains the problem in clear and specific terms, but is often concise enough to fit within the default summary space. One should be able to tell exactly what a issue is about just by reading the title.    \n\n\n\n\n\n\nComments\n: Write a more detailed explanation of the problem, do not include more than one issue in one issue report and include a relevant screenshots.\n\n\n\n\n\n\nOnce your issue is submitted, a comment will be added at each stage in the issue life cycle. After the issue is considered fixed, you may be asked to download the latest and confirm that the fix works for you.\n\n\n\n\n\n\nSuggestions\n#\n\n\nYour feedback is important, make suggestions for improvements, issues or new features. If you have a suggestion please submit an issue on our GitHub \nissue tracker\n.\n\n\nDocumentation\n#\n\n\nThe documentation is just as important as the features of Wave, and let\ns face the facts, developers aren\nt the best at documentation.", 
            "title": "Contributing"
        }, 
        {
            "location": "/contribute/#contributing", 
            "text": "Wave is open-source and, as such, grows (or shrinks)   improves in part due to the community. The goal here is to make contributions clear, make sure there is a history, and most importantly, to give credit where credit is due.", 
            "title": "Contributing"
        }, 
        {
            "location": "/contribute/#fork-it", 
            "text": "This is the preferred method for contributions. Simply create a GitHub fork, commit changes to the fork, and then open up a pull request.   Download the  GitHub for Windows Client  Login or sign-up on GitHub.  Fork the  Wave  project.", 
            "title": "Fork It!"
        }, 
        {
            "location": "/contribute/#issues", 
            "text": "The list of outstanding feature requests and issues can be found on our on our GitHub  issue tracker . Pick an unassigned issue that you think you can accomplish, add a comment that you are attempting to do it, and shortly your own personal label matching your GitHub ID will be assigned to that issue.", 
            "title": "Issues"
        }, 
        {
            "location": "/contribute/#submit-issues", 
            "text": "We know we aren t perfect, so please submit issues it s easy.\n- Check the  master  to make sure you re not wasting your (and our) time, you should be using the latest version before you submit your issue. First of all, you should download the latest nightly build to be sure you have the latest version. If you ve done this and you still experience the issue, go ahead to the next step.    Now that you have the latest version and still think you ve found a issue, please search through the  issue tracker  to see if anyone else has already submitted it. If you find that someone has submitted your issue already, please go to the next step anyway, but instead of submitting a new issue, comment on the one you ve found. If you can t find your issue, go to the next step.    When submitting the issue, use the following guidelines to help provide the most useful information in issue reports. The better your issue report, the higher the chance that your issue will be addressed quickly.    Title : A good title explains the problem in clear and specific terms, but is often concise enough to fit within the default summary space. One should be able to tell exactly what a issue is about just by reading the title.        Comments : Write a more detailed explanation of the problem, do not include more than one issue in one issue report and include a relevant screenshots.    Once your issue is submitted, a comment will be added at each stage in the issue life cycle. After the issue is considered fixed, you may be asked to download the latest and confirm that the fix works for you.", 
            "title": "Submit Issues"
        }, 
        {
            "location": "/contribute/#suggestions", 
            "text": "Your feedback is important, make suggestions for improvements, issues or new features. If you have a suggestion please submit an issue on our GitHub  issue tracker .", 
            "title": "Suggestions"
        }, 
        {
            "location": "/contribute/#documentation", 
            "text": "The documentation is just as important as the features of Wave, and let s face the facts, developers aren t the best at documentation.", 
            "title": "Documentation"
        }, 
        {
            "location": "/release-notes/", 
            "text": "Release Notes\n#\n\n\nThis will serve as a reference to the release notes with regards to the \nrelease\n version of the NuGet packages that are published.\n\n\nBacklog\n#\n\n\nThese are the changes, additions, removals that are actively being worked on and will be included in future releases.\n\n\nNew\n#\n\n\n\n\nThe \nWave.log4net.config\n file is included in the packages. \n3\n\n\nAdded \nVersion\n and \nBuildNumber\n to the \nArcFM\n static class. \n2\n\n\nAdded \nGetVisibleLayers\n extension method to the \nIMap\n interface which will return only those layers that are visible (either by virtue of being enabled or due to scale suppression). \n1\n\n\n\n\n\n\nUnpublished\n\n\nThe changes, additions, removals and new features that are part of the backlog have not been published to the public as nuget packages.\n\n\n\n\n\n\nVersion 1.0.3 - 2016-04-04\n#\n\n\nNew\n#\n\n\n\n\nAdded \nPerformOperation\n extension methods to the \nIEditor\n, \nIMMEditor\n, \nIWorkspace\n and \nIWorkspaceEdit\n interfaces that wrap the start / stop operation constructs. \n3\n\n\nAdded \nExecuteTask\n extension method on the \nIMMPxNode\n object to execute tasks based on name. \n2\n\n\nAdded \nCompatibleUnit\n and \nWorkLocation\n node objects. \n2\n\n\nAdded \nGetActiveTab\n extension method to the \nIMMAttributeEditor\n interface to allow for returning the \nID8List\n for the tab that is selected in the ArcFM Attribute Editor. \n2\n\n\nAdded \nPan\n, \nZoom\n, and \nFlash\n extension methods to the \nIFeature\n interface to allow for performing these actions when the proper hook is supplied. \n1\n\n\nAdded \nUnhighlight\n extension method for unhighlighting features. \n2\n\n\n\n\nChanged\n#\n\n\n\n\nThe \nGetDataChanges\n extension methods on the \nIVersion\n interface returns a \nDeltaRowCollection\n instead of a \nList{DeltaRow}\n as the accessor methods on the \nDeltaRow\n have been moved to the \nDeltaRowCollection\n class to allow for better performance. \n1\n \n4\n\n\nThe \nESRI.ArcGIS.Framework.BaseClasses\n namespace was replaced with the \nESRI.ArcGIS.ADF.BaseClasses\n namespace. \n1\n \n4\n\n\nThe \nMiner.Framework.BaseClasses\n namespace was replaced with the \nMiner.Interop\n namespace. \n2\n \n4\n\n\nMoved the \nIProgressBarAnimation\n interface into the \nESRI.ArcGIS.Framework\n namespace \n1\n\n\n\n\n\n\nVersion 1.0.2 - 2016-03-03\n#\n\n\nFixed\n#\n\n\n\n\nDue to an issue with the build server the 4.5 .NET Framework packages were not included.\n\n\n\n\n\n\nVersion 1.0.1 - 2016-03-01\n#\n\n\nNew\n#\n\n\n\n\nThe packages now support the 3.5 and 4.5 .NET Framework. \n3\n\n\nThe 4.5 .NET Framework packages now include supporting \nasync\n methods. \n3\n\n\n\n\nAdded\n#\n\n\n\n\nAdded \nExecute\n extension method to the \nISqlWorkspace\n interface to support query cursors. \n1\n\n\nAdded \nGetWorkspaces\n extension method to the \nIApplication\n interface which will return the \nIMMStandardWorkspace\n interface that will give the \nLoginWorkspace\n, \nLibraryWorkspace\n, and \nEditWorkspace\n. \n2\n\n\nAdded getter property for the \nLocked\n property on the \nIPxControlUI\n interface. \n2\n\n\nAdded \nGetCULibrary\n to the \nIApplication\n interface which will return the \nICuLibrary\n interface used for interacting with the storage of the library. \n2\n\n\nAdded \nGetHistory\n extension methods to the \nIMMPxApplication\n for retrieving historical data for nodes. \n2\n\n\nAdded \nGetNodeTypeName\n extension method to the \nIMMPxApplication\n to reduce the number of casts necessary to retrieve the information from the node objects. \n2\n\n\n\n\nRemoved\n#\n\n\n\n\nThe \nCreateNew\n and \nInitialize\n methods on the \nIPxNode\n interface have been removed. \n2\n \n4\n\n\nThe \nReferenceDictionary\n has been replaced with the \nToDictionary\n extension method on the \nMiner.Interop.Process.IDictionary\n which converts it to \nDictionary{String, Object}\n. \n2\n \n4\n\n\n\n\nChanged\n#\n\n\n\n\nUsing overloading mechanism instead of the optional parameters. \n3\n\n\nThe \nSession\n, \nDesign\n and \nWorkRequest\n classes updated to reflect changes to the \nIPxNode\n interface and now create and initialize based on the constructor parameters. \n2\n\n\nInstance members should not write to \nstatic\n fields in \nComboTreeDropDown\n. \n1\n\n\nRemoved \nvirtual\n from the \nDictionaryChanged\n and \nDictionaryChanging\n events in the \nObservableDictionary\n \n1\n\n\nInitialize the \nBehaviorsProperty\n property in static constructor in the \nCommandBehaviorCollection\n \n1\n\n\nDefined the locale to be used in \nString\n operations. \n3\n\n\nThe \nStartEditing\n extension methods on the \nIVersion\n and \nIWorkspace\n interfaces were removed, as they were duplicates of the \nPerformOperation\n methods.\n1\n \n4\n\n\nThe \nBaseAutoText\n implementation no longer requires the \nprogId\n parameter in the constructor as it is derived from the \nProgIdAttribute\n that is assigned to the class. \n2\n \n4\n\n\nA \nDesign\n can no longer be created as an orphan, it requires a \nWorkRequest\n or \nIMMWMSWorkRequest\n to be constructed.\n\n\n\n\n\n\nVersion 1.0.0 - 2016-02-06\n#\n\n\nNew\n#\n\n\n\n\nInitial support for version 10 of the ArcFM Solution and ArcGIS for Desktop products\n\n\n\n\n\n\nReleases\n\n\nYou can install and use a previous release of the packages by specifying the package version in the Package Manager Console window.\n\n\n\n\n\n\n\n\n\n\n\n\nA change that is included in the \nWave Extensions for ArcGIS\n package.\n\n\n\n\n\n\nA change that is included in the \nWave Extensions for ArcFM\n package.\n\n\n\n\n\n\nA change that is included in both the \nWave Extensions for ArcGIS\n and \nWave Extensions for ArcFM\n packages.\n\n\n\n\n\n\nA change that \npotentially\n causes other components to \nfail\n.", 
            "title": "Release Notes"
        }, 
        {
            "location": "/release-notes/#release-notes", 
            "text": "This will serve as a reference to the release notes with regards to the  release  version of the NuGet packages that are published.", 
            "title": "Release Notes"
        }, 
        {
            "location": "/release-notes/#backlog", 
            "text": "These are the changes, additions, removals that are actively being worked on and will be included in future releases.", 
            "title": "Backlog"
        }, 
        {
            "location": "/release-notes/#new", 
            "text": "The  Wave.log4net.config  file is included in the packages.  3  Added  Version  and  BuildNumber  to the  ArcFM  static class.  2  Added  GetVisibleLayers  extension method to the  IMap  interface which will return only those layers that are visible (either by virtue of being enabled or due to scale suppression).  1    Unpublished  The changes, additions, removals and new features that are part of the backlog have not been published to the public as nuget packages.", 
            "title": "New"
        }, 
        {
            "location": "/release-notes/#version-103-2016-04-04", 
            "text": "", 
            "title": "Version 1.0.3 - 2016-04-04"
        }, 
        {
            "location": "/release-notes/#new_1", 
            "text": "Added  PerformOperation  extension methods to the  IEditor ,  IMMEditor ,  IWorkspace  and  IWorkspaceEdit  interfaces that wrap the start / stop operation constructs.  3  Added  ExecuteTask  extension method on the  IMMPxNode  object to execute tasks based on name.  2  Added  CompatibleUnit  and  WorkLocation  node objects.  2  Added  GetActiveTab  extension method to the  IMMAttributeEditor  interface to allow for returning the  ID8List  for the tab that is selected in the ArcFM Attribute Editor.  2  Added  Pan ,  Zoom , and  Flash  extension methods to the  IFeature  interface to allow for performing these actions when the proper hook is supplied.  1  Added  Unhighlight  extension method for unhighlighting features.  2", 
            "title": "New"
        }, 
        {
            "location": "/release-notes/#changed", 
            "text": "The  GetDataChanges  extension methods on the  IVersion  interface returns a  DeltaRowCollection  instead of a  List{DeltaRow}  as the accessor methods on the  DeltaRow  have been moved to the  DeltaRowCollection  class to allow for better performance.  1   4  The  ESRI.ArcGIS.Framework.BaseClasses  namespace was replaced with the  ESRI.ArcGIS.ADF.BaseClasses  namespace.  1   4  The  Miner.Framework.BaseClasses  namespace was replaced with the  Miner.Interop  namespace.  2   4  Moved the  IProgressBarAnimation  interface into the  ESRI.ArcGIS.Framework  namespace  1", 
            "title": "Changed"
        }, 
        {
            "location": "/release-notes/#version-102-2016-03-03", 
            "text": "", 
            "title": "Version 1.0.2 - 2016-03-03"
        }, 
        {
            "location": "/release-notes/#fixed", 
            "text": "Due to an issue with the build server the 4.5 .NET Framework packages were not included.", 
            "title": "Fixed"
        }, 
        {
            "location": "/release-notes/#version-101-2016-03-01", 
            "text": "", 
            "title": "Version 1.0.1 - 2016-03-01"
        }, 
        {
            "location": "/release-notes/#new_2", 
            "text": "The packages now support the 3.5 and 4.5 .NET Framework.  3  The 4.5 .NET Framework packages now include supporting  async  methods.  3", 
            "title": "New"
        }, 
        {
            "location": "/release-notes/#added", 
            "text": "Added  Execute  extension method to the  ISqlWorkspace  interface to support query cursors.  1  Added  GetWorkspaces  extension method to the  IApplication  interface which will return the  IMMStandardWorkspace  interface that will give the  LoginWorkspace ,  LibraryWorkspace , and  EditWorkspace .  2  Added getter property for the  Locked  property on the  IPxControlUI  interface.  2  Added  GetCULibrary  to the  IApplication  interface which will return the  ICuLibrary  interface used for interacting with the storage of the library.  2  Added  GetHistory  extension methods to the  IMMPxApplication  for retrieving historical data for nodes.  2  Added  GetNodeTypeName  extension method to the  IMMPxApplication  to reduce the number of casts necessary to retrieve the information from the node objects.  2", 
            "title": "Added"
        }, 
        {
            "location": "/release-notes/#removed", 
            "text": "The  CreateNew  and  Initialize  methods on the  IPxNode  interface have been removed.  2   4  The  ReferenceDictionary  has been replaced with the  ToDictionary  extension method on the  Miner.Interop.Process.IDictionary  which converts it to  Dictionary{String, Object} .  2   4", 
            "title": "Removed"
        }, 
        {
            "location": "/release-notes/#changed_1", 
            "text": "Using overloading mechanism instead of the optional parameters.  3  The  Session ,  Design  and  WorkRequest  classes updated to reflect changes to the  IPxNode  interface and now create and initialize based on the constructor parameters.  2  Instance members should not write to  static  fields in  ComboTreeDropDown .  1  Removed  virtual  from the  DictionaryChanged  and  DictionaryChanging  events in the  ObservableDictionary   1  Initialize the  BehaviorsProperty  property in static constructor in the  CommandBehaviorCollection   1  Defined the locale to be used in  String  operations.  3  The  StartEditing  extension methods on the  IVersion  and  IWorkspace  interfaces were removed, as they were duplicates of the  PerformOperation  methods. 1   4  The  BaseAutoText  implementation no longer requires the  progId  parameter in the constructor as it is derived from the  ProgIdAttribute  that is assigned to the class.  2   4  A  Design  can no longer be created as an orphan, it requires a  WorkRequest  or  IMMWMSWorkRequest  to be constructed.", 
            "title": "Changed"
        }, 
        {
            "location": "/release-notes/#version-100-2016-02-06", 
            "text": "", 
            "title": "Version 1.0.0 - 2016-02-06"
        }, 
        {
            "location": "/release-notes/#new_3", 
            "text": "Initial support for version 10 of the ArcFM Solution and ArcGIS for Desktop products    Releases  You can install and use a previous release of the packages by specifying the package version in the Package Manager Console window.       A change that is included in the  Wave Extensions for ArcGIS  package.    A change that is included in the  Wave Extensions for ArcFM  package.    A change that is included in both the  Wave Extensions for ArcGIS  and  Wave Extensions for ArcFM  packages.    A change that  potentially  causes other components to  fail .", 
            "title": "New"
        }, 
        {
            "location": "/license/", 
            "text": "License\n#\n\n\nThe MIT License (MIT)\n#\n\n\nCopyright (c) 2014 Kyle Baesler\n\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \nSoftware\n), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\n\nTHE SOFTWARE IS PROVIDED \nAS IS\n, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\nFreepik\n#\n\n\nThe icon was designed by \nFreepik", 
            "title": "License"
        }, 
        {
            "location": "/license/#license", 
            "text": "", 
            "title": "License"
        }, 
        {
            "location": "/license/#the-mit-license-mit", 
            "text": "Copyright (c) 2014 Kyle Baesler  Permission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the  Software ), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:  The above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.  THE SOFTWARE IS PROVIDED  AS IS , WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.", 
            "title": "The MIT License (MIT)"
        }, 
        {
            "location": "/license/#freepik", 
            "text": "The icon was designed by  Freepik", 
            "title": "Freepik"
        }, 
        {
            "location": "/resources/", 
            "text": "Resources\n#\n\n\nHelpful links to online resources used to develop the wave library.\n\n\n\n\n\n\nDownload the ArcFM Sample Data\n\n\n\n\n\n\nArcFM Documentation\n\n\n\n\n\n\nArcGIS for Desktop Documentation", 
            "title": "Resources"
        }, 
        {
            "location": "/resources/#resources", 
            "text": "Helpful links to online resources used to develop the wave library.    Download the ArcFM Sample Data    ArcFM Documentation    ArcGIS for Desktop Documentation", 
            "title": "Resources"
        }
    ]
}