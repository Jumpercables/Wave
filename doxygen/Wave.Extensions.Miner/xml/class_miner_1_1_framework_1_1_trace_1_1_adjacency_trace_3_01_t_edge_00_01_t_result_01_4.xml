<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.8">
  <compounddef id="class_miner_1_1_framework_1_1_trace_1_1_adjacency_trace_3_01_t_edge_00_01_t_result_01_4" kind="class" prot="public" abstract="yes">
    <compoundname>Miner::Framework::Trace::AdjacencyTrace&lt; TEdge, TResult &gt;</compoundname>
    <basecompoundref refid="class_miner_1_1_framework_1_1_trace_1_1_connectivity_trace_3_01_t_results_01_4" prot="public" virt="non-virtual">Miner.Framework.Trace.ConnectivityTrace&lt; TResults &gt;</basecompoundref>
    <templateparamlist>
      <param>
        <type>TEdge</type>
      </param>
      <param>
        <type>TResult</type>
      </param>
    </templateparamlist>
      <sectiondef kind="property">
      <memberdef kind="property" id="class_miner_1_1_framework_1_1_trace_1_1_adjacency_trace_3_01_t_edge_00_01_t_result_01_4_1adb3cf5bc80f6ed6d2f54cbefd76e8b41" prot="protected" static="no" readable="no" writable="no" gettable="yes" privategettable="no" protectedgettable="no" settable="yes" privatesettable="no" protectedsettable="no">
        <type>IGraph&lt; IEIDInfo, TEdge &gt;</type>
        <definition>IGraph&lt;IEIDInfo, TEdge&gt; Miner.Framework.Trace.AdjacencyTrace&lt; TEdge, TResult &gt;.Graph</definition>
        <argsstring></argsstring>
        <name>Graph</name>
        <briefdescription>
<para>Gets the graph. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ad-kbaesler/Documents/GitHub/Wave/src/Wave.Extensions.Miner/Miner/Framework/Trace/Strategies/AdjacencyTrace.cs" line="123" column="1" bodyfile="C:/Users/ad-kbaesler/Documents/GitHub/Wave/src/Wave.Extensions.Miner/Miner/Framework/Trace/Strategies/AdjacencyTrace.cs" bodystart="123" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="class_miner_1_1_framework_1_1_trace_1_1_adjacency_trace_3_01_t_edge_00_01_t_result_01_4_1a6421bcb006d5359cdd0a5e80d664c1a3" prot="protected" static="no" readable="no" writable="no" gettable="yes" privategettable="no" protectedgettable="no" settable="yes" privatesettable="no" protectedsettable="no">
        <type>bool</type>
        <definition>bool Miner.Framework.Trace.AdjacencyTrace&lt; TEdge, TResult &gt;.IsBuildingGraph</definition>
        <argsstring></argsstring>
        <name>IsBuildingGraph</name>
        <briefdescription>
<para>Gets or sets a value indicating whether the <ref refid="class_miner_1_1_framework_1_1_trace_1_1_adjacency_trace_3_01_t_edge_00_01_t_result_01_4_1adb3cf5bc80f6ed6d2f54cbefd76e8b41" kindref="member">Graph</ref> will be built. </para>        </briefdescription>
        <detaileddescription>
<para><computeroutput>true</computeroutput> if the <ref refid="class_miner_1_1_framework_1_1_trace_1_1_adjacency_trace_3_01_t_edge_00_01_t_result_01_4_1adb3cf5bc80f6ed6d2f54cbefd76e8b41" kindref="member">Graph</ref> will be built; otherwise, <computeroutput>false</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ad-kbaesler/Documents/GitHub/Wave/src/Wave.Extensions.Miner/Miner/Framework/Trace/Strategies/AdjacencyTrace.cs" line="131" column="1" bodyfile="C:/Users/ad-kbaesler/Documents/GitHub/Wave/src/Wave.Extensions.Miner/Miner/Framework/Trace/Strategies/AdjacencyTrace.cs" bodystart="131" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="class_miner_1_1_framework_1_1_trace_1_1_adjacency_trace_3_01_t_edge_00_01_t_result_01_4_1afe8e42ff9d17f8c4e261167312aa6150" prot="protected" static="no" readable="no" writable="no" gettable="yes" privategettable="no" protectedgettable="no" settable="yes" privatesettable="no" protectedsettable="no">
        <type>AdjacencyQueue&lt; IEIDInfo, IEIDInfo &gt;</type>
        <definition>AdjacencyQueue&lt;IEIDInfo, IEIDInfo&gt; Miner.Framework.Trace.AdjacencyTrace&lt; TEdge, TResult &gt;.Queue</definition>
        <argsstring></argsstring>
        <name>Queue</name>
        <briefdescription>
<para>Gets or sets the queue. </para>        </briefdescription>
        <detaileddescription>
<para>The queue. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ad-kbaesler/Documents/GitHub/Wave/src/Wave.Extensions.Miner/Miner/Framework/Trace/Strategies/AdjacencyTrace.cs" line="139" column="1" bodyfile="C:/Users/ad-kbaesler/Documents/GitHub/Wave/src/Wave.Extensions.Miner/Miner/Framework/Trace/Strategies/AdjacencyTrace.cs" bodystart="139" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="class_miner_1_1_framework_1_1_trace_1_1_adjacency_trace_3_01_t_edge_00_01_t_result_01_4_1a374f58c95b85a974c0ba672925ac7fbe" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Miner.Framework.Trace.AdjacencyTrace&lt; TEdge, TResult &gt;.AdjacencyTrace</definition>
        <argsstring>()</argsstring>
        <name>AdjacencyTrace</name>
        <briefdescription>
<para>Initializes a new instance of the AdjacencyTrace{TEdge, TResult} class. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ad-kbaesler/Documents/GitHub/Wave/src/Wave.Extensions.Miner/Miner/Framework/Trace/Strategies/AdjacencyTrace.cs" line="100" column="1" bodyfile="C:/Users/ad-kbaesler/Documents/GitHub/Wave/src/Wave.Extensions.Miner/Miner/Framework/Trace/Strategies/AdjacencyTrace.cs" bodystart="100" bodyend="103"/>
      </memberdef>
      <memberdef kind="function" id="class_miner_1_1_framework_1_1_trace_1_1_adjacency_trace_3_01_t_edge_00_01_t_result_01_4_1a0d5dbabdcb0d9c0b514e8916f4d19cbe" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Miner.Framework.Trace.AdjacencyTrace&lt; TEdge, TResult &gt;.AdjacencyTrace</definition>
        <argsstring>(bool isBuildingGraph)</argsstring>
        <name>AdjacencyTrace</name>
        <param>
          <type>bool</type>
          <declname>isBuildingGraph</declname>
        </param>
        <briefdescription>
<para>Initializes a new instance of the AdjacencyTrace{TEdge, TResult} class. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>isBuildingGraph</parametername>
</parameternamelist>
<parameterdescription>
<para>if set to <computeroutput>true</computeroutput> a graph representation of the results will be built.</para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ad-kbaesler/Documents/GitHub/Wave/src/Wave.Extensions.Miner/Miner/Framework/Trace/Strategies/AdjacencyTrace.cs" line="109" column="1" bodyfile="C:/Users/ad-kbaesler/Documents/GitHub/Wave/src/Wave.Extensions.Miner/Miner/Framework/Trace/Strategies/AdjacencyTrace.cs" bodystart="109" bodyend="114"/>
      </memberdef>
      <memberdef kind="function" id="class_miner_1_1_framework_1_1_trace_1_1_adjacency_trace_3_01_t_edge_00_01_t_result_01_4_1a3f44d622db53e9c63b3880ac2fb5a594" prot="protected" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>abstract TEdge</type>
        <definition>abstract TEdge Miner.Framework.Trace.AdjacencyTrace&lt; TEdge, TResult &gt;.GetAdjacencyNode</definition>
        <argsstring>(IEIDInfo edge, IEIDInfo source, IEIDInfo target, bool sourceAlreadyVisited, bool targetAlreadyVisited)</argsstring>
        <name>GetAdjacencyNode</name>
        <param>
          <type>IEIDInfo</type>
          <declname>edge</declname>
        </param>
        <param>
          <type>IEIDInfo</type>
          <declname>source</declname>
        </param>
        <param>
          <type>IEIDInfo</type>
          <declname>target</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>sourceAlreadyVisited</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>targetAlreadyVisited</declname>
        </param>
        <briefdescription>
<para>Gets the node that will be added to the graph. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>edge</parametername>
</parameternamelist>
<parameterdescription>
<para>The edge feature.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>source</parametername>
</parameternamelist>
<parameterdescription>
<para>The source junction feature.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>target</parametername>
</parameternamelist>
<parameterdescription>
<para>The target junction feature.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sourceAlreadyVisited</parametername>
</parameternamelist>
<parameterdescription>
<para>if set to <computeroutput>true</computeroutput> if the source junction has already been visited by the trace.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>targetAlreadyVisited</parametername>
</parameternamelist>
<parameterdescription>
<para>if set to <computeroutput>true</computeroutput> if the target junction has already been visited by the trace.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns an <ref refid="class_miner_1_1_framework_1_1_trace_1_1_adjacency_node" kindref="compound">AdjacencyNode</ref> representing the edge and junctions. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ad-kbaesler/Documents/GitHub/Wave/src/Wave.Extensions.Miner/Miner/Framework/Trace/Strategies/AdjacencyTrace.cs" line="156" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_miner_1_1_framework_1_1_trace_1_1_adjacency_trace_3_01_t_edge_00_01_t_result_01_4_1ae579e29c0ab9aad902633c1c1498b8e0" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>override void</type>
        <definition>override void Miner.Framework.Trace.AdjacencyTrace&lt; TEdge, TResult &gt;.OnAfterTrace</definition>
        <argsstring>(TResult traceResults, IFeature feature)</argsstring>
        <name>OnAfterTrace</name>
        <param>
          <type>TResult</type>
          <declname>traceResults</declname>
        </param>
        <param>
          <type>IFeature</type>
          <declname>feature</declname>
        </param>
        <briefdescription>
<para>Called after the trace has completed. </para>        </briefdescription>
        <detaileddescription>
<para>The default behavior is to do nothing. </para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>traceResults</parametername>
</parameternamelist>
<parameterdescription>
<para>The trace results.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>feature</parametername>
</parameternamelist>
<parameterdescription>
<para>The feature.</para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ad-kbaesler/Documents/GitHub/Wave/src/Wave.Extensions.Miner/Miner/Framework/Trace/Strategies/AdjacencyTrace.cs" line="163" column="1" bodyfile="C:/Users/ad-kbaesler/Documents/GitHub/Wave/src/Wave.Extensions.Miner/Miner/Framework/Trace/Strategies/AdjacencyTrace.cs" bodystart="163" bodyend="168"/>
      </memberdef>
      <memberdef kind="function" id="class_miner_1_1_framework_1_1_trace_1_1_adjacency_trace_3_01_t_edge_00_01_t_result_01_4_1a4dec65e2b3dee9e80c1b85e41335c746" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>override void</type>
        <definition>override void Miner.Framework.Trace.AdjacencyTrace&lt; TEdge, TResult &gt;.OnBeforeTrace</definition>
        <argsstring>(IFeature feature)</argsstring>
        <name>OnBeforeTrace</name>
        <reimplements refid="class_miner_1_1_framework_1_1_base_classes_1_1_base_trace_3_01_t_results_01_4_1aad173146a884196302daa2737547d3a0">OnBeforeTrace</reimplements>
        <param>
          <type>IFeature</type>
          <declname>feature</declname>
        </param>
        <briefdescription>
<para>Called before the trace has started. </para>        </briefdescription>
        <detaileddescription>
<para>The default behavior is to initialize instance variables. </para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>feature</parametername>
</parameternamelist>
<parameterdescription>
<para>The feature.</para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ad-kbaesler/Documents/GitHub/Wave/src/Wave.Extensions.Miner/Miner/Framework/Trace/Strategies/AdjacencyTrace.cs" line="174" column="1" bodyfile="C:/Users/ad-kbaesler/Documents/GitHub/Wave/src/Wave.Extensions.Miner/Miner/Framework/Trace/Strategies/AdjacencyTrace.cs" bodystart="174" bodyend="180"/>
      </memberdef>
      <memberdef kind="function" id="class_miner_1_1_framework_1_1_trace_1_1_adjacency_trace_3_01_t_edge_00_01_t_result_01_4_1a6865582aee838a740e8b9bb6a23a7177" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>override bool</type>
        <definition>override bool Miner.Framework.Trace.AdjacencyTrace&lt; TEdge, TResult &gt;.OnConnectedEdge</definition>
        <argsstring>(int edgeEID, int edgeIndex, int edgeCount, int junctionEID)</argsstring>
        <name>OnConnectedEdge</name>
        <reimplements refid="class_miner_1_1_framework_1_1_trace_1_1_connectivity_trace_3_01_t_results_01_4_1a898425a2ec27b52379f1a9957e4bcc84">OnConnectedEdge</reimplements>
        <param>
          <type>int</type>
          <declname>edgeEID</declname>
        </param>
        <param>
          <type>int</type>
          <declname>edgeIndex</declname>
        </param>
        <param>
          <type>int</type>
          <declname>edgeCount</declname>
        </param>
        <param>
          <type>int</type>
          <declname>junctionEID</declname>
        </param>
        <briefdescription>
<para>Called when a connected edge is traced. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>edgeEID</parametername>
</parameternamelist>
<parameterdescription>
<para>The edge EID.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edgeIndex</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of the edge.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edgeCount</parametername>
</parameternamelist>
<parameterdescription>
<para>The edge count.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>junctionEID</parametername>
</parameternamelist>
<parameterdescription>
<para>The junction EID.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> to continue tracing; otherwise <computeroutput>false</computeroutput> to stop the trace. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ad-kbaesler/Documents/GitHub/Wave/src/Wave.Extensions.Miner/Miner/Framework/Trace/Strategies/AdjacencyTrace.cs" line="192" column="1" bodyfile="C:/Users/ad-kbaesler/Documents/GitHub/Wave/src/Wave.Extensions.Miner/Miner/Framework/Trace/Strategies/AdjacencyTrace.cs" bodystart="192" bodyend="201"/>
      </memberdef>
      <memberdef kind="function" id="class_miner_1_1_framework_1_1_trace_1_1_adjacency_trace_3_01_t_edge_00_01_t_result_01_4_1aa24502e161176c7cdba60c4383773e85" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>override bool</type>
        <definition>override bool Miner.Framework.Trace.AdjacencyTrace&lt; TEdge, TResult &gt;.OnConnectedJunction</definition>
        <argsstring>(int junctionEID, int edgeEID)</argsstring>
        <name>OnConnectedJunction</name>
        <reimplements refid="class_miner_1_1_framework_1_1_trace_1_1_connectivity_trace_3_01_t_results_01_4_1a79110e767664da79efeb777f2e0156ec">OnConnectedJunction</reimplements>
        <param>
          <type>int</type>
          <declname>junctionEID</declname>
        </param>
        <param>
          <type>int</type>
          <declname>edgeEID</declname>
        </param>
        <briefdescription>
<para>Called when a connected junction is traced. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>junctionEID</parametername>
</parameternamelist>
<parameterdescription>
<para>The junction EID.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edgeEID</parametername>
</parameternamelist>
<parameterdescription>
<para>The edge EID.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> to continue tracing; otherwise <computeroutput>false</computeroutput> to stop the trace. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ad-kbaesler/Documents/GitHub/Wave/src/Wave.Extensions.Miner/Miner/Framework/Trace/Strategies/AdjacencyTrace.cs" line="211" column="1" bodyfile="C:/Users/ad-kbaesler/Documents/GitHub/Wave/src/Wave.Extensions.Miner/Miner/Framework/Trace/Strategies/AdjacencyTrace.cs" bodystart="211" bodyend="237"/>
      </memberdef>
      <memberdef kind="function" id="class_miner_1_1_framework_1_1_trace_1_1_adjacency_trace_3_01_t_edge_00_01_t_result_01_4_1a5435f398401bf084e4659f2f5e2a7943" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>override void</type>
        <definition>override void Miner.Framework.Trace.AdjacencyTrace&lt; TEdge, TResult &gt;.OnReset</definition>
        <argsstring>(int junctionEID, int edgeEID, int edgeCount)</argsstring>
        <name>OnReset</name>
        <reimplements refid="class_miner_1_1_framework_1_1_trace_1_1_connectivity_trace_3_01_t_results_01_4_1a570aef9671ad12548d0d7a213e2f0620">OnReset</reimplements>
        <param>
          <type>int</type>
          <declname>junctionEID</declname>
        </param>
        <param>
          <type>int</type>
          <declname>edgeEID</declname>
        </param>
        <param>
          <type>int</type>
          <declname>edgeCount</declname>
        </param>
        <briefdescription>
<para>Called when the trace has finished tracing a branch and is being reset back to the branching vertex. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>junctionEID</parametername>
</parameternamelist>
<parameterdescription>
<para>The junction EID.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edgeEID</parametername>
</parameternamelist>
<parameterdescription>
<para>The edge EID.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edgeCount</parametername>
</parameternamelist>
<parameterdescription>
<para>The edge count.</para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ad-kbaesler/Documents/GitHub/Wave/src/Wave.Extensions.Miner/Miner/Framework/Trace/Strategies/AdjacencyTrace.cs" line="245" column="1" bodyfile="C:/Users/ad-kbaesler/Documents/GitHub/Wave/src/Wave.Extensions.Miner/Miner/Framework/Trace/Strategies/AdjacencyTrace.cs" bodystart="245" bodyend="253"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_miner_1_1_framework_1_1_trace_1_1_adjacency_trace_3_01_t_edge_00_01_t_result_01_4_1a586815f0a652a1cbbbca12bb5cd9ee34" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Miner.Framework.Trace.AdjacencyTrace&lt; TEdge, TResult &gt;.AddEdge</definition>
        <argsstring>(IEIDInfo source, IEIDInfo target, IEIDInfo edge)</argsstring>
        <name>AddEdge</name>
        <param>
          <type>IEIDInfo</type>
          <declname>source</declname>
        </param>
        <param>
          <type>IEIDInfo</type>
          <declname>target</declname>
        </param>
        <param>
          <type>IEIDInfo</type>
          <declname>edge</declname>
        </param>
        <briefdescription>
<para>Adds the edge to the graph. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>source</parametername>
</parameternamelist>
<parameterdescription>
<para>The source.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>target</parametername>
</parameternamelist>
<parameterdescription>
<para>The target.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edge</parametername>
</parameternamelist>
<parameterdescription>
<para>The edge.</para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ad-kbaesler/Documents/GitHub/Wave/src/Wave.Extensions.Miner/Miner/Framework/Trace/Strategies/AdjacencyTrace.cs" line="265" column="1" bodyfile="C:/Users/ad-kbaesler/Documents/GitHub/Wave/src/Wave.Extensions.Miner/Miner/Framework/Trace/Strategies/AdjacencyTrace.cs" bodystart="265" bodyend="279"/>
      </memberdef>
      <memberdef kind="function" id="class_miner_1_1_framework_1_1_trace_1_1_adjacency_trace_3_01_t_edge_00_01_t_result_01_4_1a2ae467f5135fae2b8e5fe7d0eb368937" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Miner.Framework.Trace.AdjacencyTrace&lt; TEdge, TResult &gt;.AlreadyVisited</definition>
        <argsstring>(IEIDInfo eidInfo, esriElementType elementType, out int visitedCount)</argsstring>
        <name>AlreadyVisited</name>
        <param>
          <type>IEIDInfo</type>
          <declname>eidInfo</declname>
        </param>
        <param>
          <type>esriElementType</type>
          <declname>elementType</declname>
        </param>
        <param>
          <type>out int</type>
          <declname>visitedCount</declname>
        </param>
        <briefdescription>
<para>Determines whether the specified element has already been visited by the trace. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>eidInfo</parametername>
</parameternamelist>
<parameterdescription>
<para>The eid information.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>elementType</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the element.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>visitedCount</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of times the eid has been visited.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if the specified element has already been visited by the trace; otherwise, <computeroutput>false</computeroutput>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ad-kbaesler/Documents/GitHub/Wave/src/Wave.Extensions.Miner/Miner/Framework/Trace/Strategies/AdjacencyTrace.cs" line="291" column="1" bodyfile="C:/Users/ad-kbaesler/Documents/GitHub/Wave/src/Wave.Extensions.Miner/Miner/Framework/Trace/Strategies/AdjacencyTrace.cs" bodystart="291" bodyend="301"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A connectivity trace that builds an AdjacencyGraph{TVertex, TEdge} of the connected edges and junctions. </para>    </briefdescription>
    <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>TEdge</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the edge.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>TResult</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the result.</para></parameterdescription>
</parameteritem>
</parameterlist>
</para>    </detaileddescription>
    <inheritancegraph>
      <node id="20">
        <label>Miner.Framework.Trace.AdjacencyTrace&lt; TEdge, TResult &gt;</label>
        <link refid="class_miner_1_1_framework_1_1_trace_1_1_adjacency_trace_3_01_t_edge_00_01_t_result_01_4"/>
        <childnode refid="21" relation="public-inheritance">
        </childnode>
      </node>
      <node id="22">
        <label>BaseTrace&lt; TResults &gt;</label>
        <link refid="class_miner_1_1_framework_1_1_base_classes_1_1_base_trace_3_01_t_results_01_4"/>
      </node>
      <node id="21">
        <label>ConnectivityTrace&lt; TResult &gt;</label>
        <link refid="class_miner_1_1_framework_1_1_trace_1_1_connectivity_trace_3_01_t_results_01_4"/>
        <childnode refid="22" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="23">
        <label>Miner.Framework.Trace.AdjacencyTrace&lt; TEdge, TResult &gt;</label>
        <link refid="class_miner_1_1_framework_1_1_trace_1_1_adjacency_trace_3_01_t_edge_00_01_t_result_01_4"/>
        <childnode refid="24" relation="public-inheritance">
        </childnode>
      </node>
      <node id="25">
        <label>BaseTrace&lt; TResults &gt;</label>
        <link refid="class_miner_1_1_framework_1_1_base_classes_1_1_base_trace_3_01_t_results_01_4"/>
      </node>
      <node id="24">
        <label>ConnectivityTrace&lt; TResult &gt;</label>
        <link refid="class_miner_1_1_framework_1_1_trace_1_1_connectivity_trace_3_01_t_results_01_4"/>
        <childnode refid="25" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="C:/Users/ad-kbaesler/Documents/GitHub/Wave/src/Wave.Extensions.Miner/Miner/Framework/Trace/Strategies/AdjacencyTrace.cs" line="94" column="1" bodyfile="C:/Users/ad-kbaesler/Documents/GitHub/Wave/src/Wave.Extensions.Miner/Miner/Framework/Trace/Strategies/AdjacencyTrace.cs" bodystart="91" bodyend="304"/>
    <listofallmembers>
      <member refid="class_miner_1_1_framework_1_1_trace_1_1_adjacency_trace_3_01_t_edge_00_01_t_result_01_4_1a586815f0a652a1cbbbca12bb5cd9ee34" prot="private" virt="non-virtual"><scope>Miner::Framework::Trace::AdjacencyTrace&lt; TEdge, TResult &gt;</scope><name>AddEdge</name></member>
      <member refid="class_miner_1_1_framework_1_1_trace_1_1_adjacency_trace_3_01_t_edge_00_01_t_result_01_4_1a374f58c95b85a974c0ba672925ac7fbe" prot="protected" virt="non-virtual"><scope>Miner::Framework::Trace::AdjacencyTrace&lt; TEdge, TResult &gt;</scope><name>AdjacencyTrace</name></member>
      <member refid="class_miner_1_1_framework_1_1_trace_1_1_adjacency_trace_3_01_t_edge_00_01_t_result_01_4_1a0d5dbabdcb0d9c0b514e8916f4d19cbe" prot="protected" virt="non-virtual"><scope>Miner::Framework::Trace::AdjacencyTrace&lt; TEdge, TResult &gt;</scope><name>AdjacencyTrace</name></member>
      <member refid="class_miner_1_1_framework_1_1_trace_1_1_adjacency_trace_3_01_t_edge_00_01_t_result_01_4_1a2ae467f5135fae2b8e5fe7d0eb368937" prot="private" virt="non-virtual"><scope>Miner::Framework::Trace::AdjacencyTrace&lt; TEdge, TResult &gt;</scope><name>AlreadyVisited</name></member>
      <member refid="class_miner_1_1_framework_1_1_base_classes_1_1_base_trace_3_01_t_results_01_4_1a0c0e902b826a8a0d34bffb013906f325" prot="protected" virt="non-virtual"><scope>Miner::Framework::Trace::AdjacencyTrace&lt; TEdge, TResult &gt;</scope><name>BaseTrace</name></member>
      <member refid="class_miner_1_1_framework_1_1_trace_1_1_connectivity_trace_3_01_t_results_01_4_1a0e6415e63ee10f8a13cddf2039079ad0" prot="protected" virt="non-virtual"><scope>Miner::Framework::Trace::AdjacencyTrace&lt; TEdge, TResult &gt;</scope><name>ConnectivityTrace</name></member>
      <member refid="class_miner_1_1_framework_1_1_trace_1_1_connectivity_trace_3_01_t_results_01_4_1a41e161b9557caa1d89a479f110e2c947" prot="protected" virt="virtual"><scope>Miner::Framework::Trace::AdjacencyTrace&lt; TEdge, TResult &gt;</scope><name>CreateNavigator</name></member>
      <member refid="class_miner_1_1_framework_1_1_trace_1_1_connectivity_trace_3_01_t_results_01_4_1a1a4a47757a190dce1ef2c3f4cc458386" prot="protected" virt="pure-virtual"><scope>Miner::Framework::Trace::AdjacencyTrace&lt; TEdge, TResult &gt;</scope><name>CreateResults</name></member>
      <member refid="class_miner_1_1_framework_1_1_trace_1_1_connectivity_trace_3_01_t_results_01_4_1a9aaf00baec4fc24fde017b9a590d159a" prot="protected" virt="non-virtual"><scope>Miner::Framework::Trace::AdjacencyTrace&lt; TEdge, TResult &gt;</scope><name>Edges</name></member>
      <member refid="class_miner_1_1_framework_1_1_base_classes_1_1_base_trace_3_01_t_results_01_4_1a1d7e653858eea0a9382cd70fb92f4ae5" prot="protected" virt="non-virtual"><scope>Miner::Framework::Trace::AdjacencyTrace&lt; TEdge, TResult &gt;</scope><name>EID</name></member>
      <member refid="class_miner_1_1_framework_1_1_base_classes_1_1_base_trace_3_01_t_results_01_4_1a53e328d2a60ca16c0042ecd86287296a" prot="protected" virt="non-virtual"><scope>Miner::Framework::Trace::AdjacencyTrace&lt; TEdge, TResult &gt;</scope><name>ElementType</name></member>
      <member refid="class_miner_1_1_framework_1_1_base_classes_1_1_base_trace_3_01_t_results_01_4_1ae4b457fd6e0e73c83c94580686767d0b" prot="protected" virt="non-virtual"><scope>Miner::Framework::Trace::AdjacencyTrace&lt; TEdge, TResult &gt;</scope><name>GeometricNetwork</name></member>
      <member refid="class_miner_1_1_framework_1_1_trace_1_1_adjacency_trace_3_01_t_edge_00_01_t_result_01_4_1a3f44d622db53e9c63b3880ac2fb5a594" prot="protected" virt="pure-virtual"><scope>Miner::Framework::Trace::AdjacencyTrace&lt; TEdge, TResult &gt;</scope><name>GetAdjacencyNode</name></member>
      <member refid="class_miner_1_1_framework_1_1_base_classes_1_1_base_trace_3_01_t_results_01_4_1a7b383a75eac9a211bd54d32c94c43f4a" prot="protected" virt="non-virtual"><scope>Miner::Framework::Trace::AdjacencyTrace&lt; TEdge, TResult &gt;</scope><name>GetEID</name></member>
      <member refid="class_miner_1_1_framework_1_1_base_classes_1_1_base_trace_3_01_t_results_01_4_1ad55b52f8cb81cbaa0d5edfc61f20cf6c" prot="protected" virt="non-virtual"><scope>Miner::Framework::Trace::AdjacencyTrace&lt; TEdge, TResult &gt;</scope><name>GetEIDInfo</name></member>
      <member refid="class_miner_1_1_framework_1_1_trace_1_1_connectivity_trace_3_01_t_results_01_4_1abb549524563862dd5a39cefb78c87f0e" prot="protected" virt="non-virtual"><scope>Miner::Framework::Trace::AdjacencyTrace&lt; TEdge, TResult &gt;</scope><name>GetWeight</name></member>
      <member refid="class_miner_1_1_framework_1_1_trace_1_1_adjacency_trace_3_01_t_edge_00_01_t_result_01_4_1adb3cf5bc80f6ed6d2f54cbefd76e8b41" prot="protected" virt="non-virtual"><scope>Miner::Framework::Trace::AdjacencyTrace&lt; TEdge, TResult &gt;</scope><name>Graph</name></member>
      <member refid="class_miner_1_1_framework_1_1_trace_1_1_adjacency_trace_3_01_t_edge_00_01_t_result_01_4_1a6421bcb006d5359cdd0a5e80d664c1a3" prot="protected" virt="non-virtual"><scope>Miner::Framework::Trace::AdjacencyTrace&lt; TEdge, TResult &gt;</scope><name>IsBuildingGraph</name></member>
      <member refid="class_miner_1_1_framework_1_1_base_classes_1_1_base_trace_3_01_t_results_01_4_1a625623f7129539612d1e5214ed9b569c" prot="protected" virt="non-virtual"><scope>Miner::Framework::Trace::AdjacencyTrace&lt; TEdge, TResult &gt;</scope><name>IsGenericJunction</name></member>
      <member refid="class_miner_1_1_framework_1_1_base_classes_1_1_base_trace_3_01_t_results_01_4_1aa5638464e8dc094c278816f5a444a950" prot="protected" virt="non-virtual"><scope>Miner::Framework::Trace::AdjacencyTrace&lt; TEdge, TResult &gt;</scope><name>IsGenericJunction</name></member>
      <member refid="class_miner_1_1_framework_1_1_trace_1_1_connectivity_trace_3_01_t_results_01_4_1a7836fad02b86afb079861ab7013fe19a" prot="protected" virt="non-virtual"><scope>Miner::Framework::Trace::AdjacencyTrace&lt; TEdge, TResult &gt;</scope><name>Junctions</name></member>
      <member refid="class_miner_1_1_framework_1_1_trace_1_1_adjacency_trace_3_01_t_edge_00_01_t_result_01_4_1ae579e29c0ab9aad902633c1c1498b8e0" prot="protected" virt="non-virtual"><scope>Miner::Framework::Trace::AdjacencyTrace&lt; TEdge, TResult &gt;</scope><name>OnAfterTrace</name></member>
      <member refid="class_miner_1_1_framework_1_1_trace_1_1_connectivity_trace_3_01_t_results_01_4_1a7498434aacbe7abf527f81a08c3a7d44" prot="protected" virt="virtual" ambiguityscope="Miner::Framework::Trace::ConnectivityTrace&lt; TResults &gt;."><scope>Miner::Framework::Trace::AdjacencyTrace&lt; TEdge, TResult &gt;</scope><name>OnAfterTrace</name></member>
      <member refid="class_miner_1_1_framework_1_1_trace_1_1_adjacency_trace_3_01_t_edge_00_01_t_result_01_4_1a4dec65e2b3dee9e80c1b85e41335c746" prot="protected" virt="virtual"><scope>Miner::Framework::Trace::AdjacencyTrace&lt; TEdge, TResult &gt;</scope><name>OnBeforeTrace</name></member>
      <member refid="class_miner_1_1_framework_1_1_trace_1_1_adjacency_trace_3_01_t_edge_00_01_t_result_01_4_1a6865582aee838a740e8b9bb6a23a7177" prot="protected" virt="virtual"><scope>Miner::Framework::Trace::AdjacencyTrace&lt; TEdge, TResult &gt;</scope><name>OnConnectedEdge</name></member>
      <member refid="class_miner_1_1_framework_1_1_trace_1_1_adjacency_trace_3_01_t_edge_00_01_t_result_01_4_1aa24502e161176c7cdba60c4383773e85" prot="protected" virt="virtual"><scope>Miner::Framework::Trace::AdjacencyTrace&lt; TEdge, TResult &gt;</scope><name>OnConnectedJunction</name></member>
      <member refid="class_miner_1_1_framework_1_1_trace_1_1_adjacency_trace_3_01_t_edge_00_01_t_result_01_4_1a5435f398401bf084e4659f2f5e2a7943" prot="protected" virt="virtual"><scope>Miner::Framework::Trace::AdjacencyTrace&lt; TEdge, TResult &gt;</scope><name>OnReset</name></member>
      <member refid="class_miner_1_1_framework_1_1_trace_1_1_connectivity_trace_3_01_t_results_01_4_1ac2c638ca7f95c22621d06c2802207bc3" prot="protected" virt="virtual"><scope>Miner::Framework::Trace::AdjacencyTrace&lt; TEdge, TResult &gt;</scope><name>OnTrace</name></member>
      <member refid="class_miner_1_1_framework_1_1_trace_1_1_adjacency_trace_3_01_t_edge_00_01_t_result_01_4_1afe8e42ff9d17f8c4e261167312aa6150" prot="protected" virt="non-virtual"><scope>Miner::Framework::Trace::AdjacencyTrace&lt; TEdge, TResult &gt;</scope><name>Queue</name></member>
      <member refid="class_miner_1_1_framework_1_1_base_classes_1_1_base_trace_3_01_t_results_01_4_1aea7f78a5c91e17f92c26ee8e6335ead6" prot="public" virt="non-virtual"><scope>Miner::Framework::Trace::AdjacencyTrace&lt; TEdge, TResult &gt;</scope><name>Trace</name></member>
      <member refid="class_miner_1_1_framework_1_1_base_classes_1_1_base_trace_3_01_t_results_01_4_1a9821bc6466bc4466572659c58eaba91c" prot="protected" virt="non-virtual"><scope>Miner::Framework::Trace::AdjacencyTrace&lt; TEdge, TResult &gt;</scope><name>Workspace</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
